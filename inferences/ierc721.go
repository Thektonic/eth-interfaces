// Code generated via abigen V2 - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package inferences

import (
	"bytes"
	"errors"
	"math/big"

	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind/v2"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = bytes.Equal
	_ = errors.New
	_ = big.NewInt
	_ = common.Big1
	_ = types.BloomLookup
	_ = abi.ConvertType
)

// Ierc721MetaData contains all meta data concerning the Ierc721 contract.
var Ierc721MetaData = bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ApprovalCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BalanceQueryForZeroAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721IncorrectOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721InsufficientApproval\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC721InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721NonexistentToken\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"ERC721OutOfBoundsIndex\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintERC2309QuantityExceedsLimit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintZeroQuantity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnerQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnershipNotInitializedForExtraData\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromIncorrectOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToNonERC721ReceiverImplementer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"URIQueryForNonexistentToken\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fromTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toTokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"ConsecutiveTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]",
	ID:  "Ierc721",
	Bin: "0x608060405234801561000f575f5ffd5b50604051612fb8380380612fb883398181016040528101906100319190610aba565b81600690816100409190610d40565b5080600790816100509190610d40565b5061005f61008a60201b60201c565b60048190555061008361007661009160201b60201c565b601e61009860201b60201c565b5050611066565b5f5f905090565b5f33905090565b6100b7828260405180602001604052805f8152506100bb60201b60201c565b5050565b6100cb838361016060201b60201c565b5f8373ffffffffffffffffffffffffffffffffffffffff163b1461015b575f60045490505f83820390505b61010e5f86838060010194508661032960201b60201c565b610144576040517fd1a57ed600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8181106100f6578160045414610158575f5ffd5b50505b505050565b5f60045490505f820361019f576040517fb562e8dd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6101b15f84838561047a60201b60201c565b600160406001901b17820260095f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f82825401925050819055506102358361021a5f865f61048060201b60201c565b610229856104ad60201b60201c565b176104bc60201b60201c565b60085f8381526020019081526020015f20819055505f5f838301905073ffffffffffffffffffffffffffffffffffffffff8516915082825f7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef5f5fa4600183015b8181146102cf5780835f7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef5f5fa4600181019050610296565b505f8203610309576040517f2e07630000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8060048190555050506103245f8483856104e660201b60201c565b505050565b5f8373ffffffffffffffffffffffffffffffffffffffff1663150b7a0261035461009160201b60201c565b8786866040518563ffffffff1660e01b81526004016103769493929190610eaf565b6020604051808303815f875af19250505080156103b157506040513d601f19601f820116820180604052508101906103ae9190610f4e565b60015b610427573d805f81146103df576040519150601f19603f3d011682016040523d82523d5f602084013e6103e4565b606091505b505f81510361041f576040517fd1a57ed600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050949350505050565b50505050565b5f5f60e883901c905060e861049c86868461052460201b60201c565b62ffffff16901b9150509392505050565b5f6001821460e11b9050919050565b5f73ffffffffffffffffffffffffffffffffffffffff83169250814260a01b178317905092915050565b5f5f90505b8181101561051d5761050f858583866105049190610fa6565b61052c60201b60201c565b5080806001019150506104eb565b5050505050565b5f9392505050565b5f5f73ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16036105745761056f8261064f60201b60201c565b6105b9565b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16146105b8576105b7848361069360201b60201c565b5b5b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610600576105fb8261076f60201b60201c565b610645565b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161461064457610643838361082f60201b60201c565b5b5b8390509392505050565b60028054905060035f8381526020019081526020015f2081905550600281908060018154018082558091505060019003905f5260205f20015f909190919091505550565b5f6106a3836108b860201b60201c565b90505f60015f8481526020019081526020015f205490505f5f5f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f209050828214610741575f815f8581526020019081526020015f2054905080825f8581526020019081526020015f20819055508260015f8381526020019081526020015f2081905550505b60015f8581526020019081526020015f205f9055805f8481526020019081526020015f205f90555050505050565b5f60016002805490506107829190610fd9565b90505f60035f8481526020019081526020015f205490505f600283815481106107ae576107ad61100c565b5b905f5260205f200154905080600283815481106107ce576107cd61100c565b5b905f5260205f2001819055508160035f8381526020019081526020015f208190555060035f8581526020019081526020015f205f9055600280548061081657610815611039565b5b600190038181905f5260205f20015f9055905550505050565b5f6001610841846108b860201b60201c565b61084b9190610fd9565b9050815f5f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8381526020019081526020015f20819055508060015f8481526020019081526020015f2081905550505050565b5f5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361091e576040517f8f4eb60400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b67ffffffffffffffff60095f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054169050919050565b5f604051905090565b5f5ffd5b5f5ffd5b5f5ffd5b5f5ffd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b6109cc82610986565b810181811067ffffffffffffffff821117156109eb576109ea610996565b5b80604052505050565b5f6109fd61096d565b9050610a0982826109c3565b919050565b5f67ffffffffffffffff821115610a2857610a27610996565b5b610a3182610986565b9050602081019050919050565b8281835e5f83830152505050565b5f610a5e610a5984610a0e565b6109f4565b905082815260208101848484011115610a7a57610a79610982565b5b610a85848285610a3e565b509392505050565b5f82601f830112610aa157610aa061097e565b5b8151610ab1848260208601610a4c565b91505092915050565b5f5f60408385031215610ad057610acf610976565b5b5f83015167ffffffffffffffff811115610aed57610aec61097a565b5b610af985828601610a8d565b925050602083015167ffffffffffffffff811115610b1a57610b1961097a565b5b610b2685828601610a8d565b9150509250929050565b5f81519050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f6002820490506001821680610b7e57607f821691505b602082108103610b9157610b90610b3a565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f60088302610bf37fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82610bb8565b610bfd8683610bb8565b95508019841693508086168417925050509392505050565b5f819050919050565b5f819050919050565b5f610c41610c3c610c3784610c15565b610c1e565b610c15565b9050919050565b5f819050919050565b610c5a83610c27565b610c6e610c6682610c48565b848454610bc4565b825550505050565b5f5f905090565b610c85610c76565b610c90818484610c51565b505050565b5b81811015610cb357610ca85f82610c7d565b600181019050610c96565b5050565b601f821115610cf857610cc981610b97565b610cd284610ba9565b81016020851015610ce1578190505b610cf5610ced85610ba9565b830182610c95565b50505b505050565b5f82821c905092915050565b5f610d185f1984600802610cfd565b1980831691505092915050565b5f610d308383610d09565b9150826002028217905092915050565b610d4982610b30565b67ffffffffffffffff811115610d6257610d61610996565b5b610d6c8254610b67565b610d77828285610cb7565b5f60209050601f831160018114610da8575f8415610d96578287015190505b610da08582610d25565b865550610e07565b601f198416610db686610b97565b5f5b82811015610ddd57848901518255600182019150602085019450602081019050610db8565b86831015610dfa5784890151610df6601f891682610d09565b8355505b6001600288020188555050505b505050505050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f610e3882610e0f565b9050919050565b610e4881610e2e565b82525050565b610e5781610c15565b82525050565b5f81519050919050565b5f82825260208201905092915050565b5f610e8182610e5d565b610e8b8185610e67565b9350610e9b818560208601610a3e565b610ea481610986565b840191505092915050565b5f608082019050610ec25f830187610e3f565b610ecf6020830186610e3f565b610edc6040830185610e4e565b8181036060830152610eee8184610e77565b905095945050505050565b5f7fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b610f2d81610ef9565b8114610f37575f5ffd5b50565b5f81519050610f4881610f24565b92915050565b5f60208284031215610f6357610f62610976565b5b5f610f7084828501610f3a565b91505092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f610fb082610c15565b9150610fbb83610c15565b9250828201905080821115610fd357610fd2610f79565b5b92915050565b5f610fe382610c15565b9150610fee83610c15565b925082820390508181111561100657611005610f79565b5b92915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603160045260245ffd5b611f45806110735f395ff3fe6080604052600436106100fd575f3560e01c806342842e0e1161009457806395d89b411161006357806395d89b411461034e578063a22cb46514610378578063b88d4fde146103a0578063c87b56dd146103bc578063e985e9c5146103f8576100fd565b806342842e0e1461027e5780634f6ccce71461029a5780636352211e146102d657806370a0823114610312576100fd565b806318160ddd116100d057806318160ddd146101bf57806323b872dd146101e95780632a55205a146102055780632f745c5914610242576100fd565b806301ffc9a71461010157806306fdde031461013d578063081812fc14610167578063095ea7b3146101a3575b5f5ffd5b34801561010c575f5ffd5b50610127600480360381019061012291906116d2565b610434565b6040516101349190611717565b60405180910390f35b348015610148575f5ffd5b506101516104c5565b60405161015e91906117a0565b60405180910390f35b348015610172575f5ffd5b5061018d600480360381019061018891906117f3565b610555565b60405161019a919061185d565b60405180910390f35b6101bd60048036038101906101b891906118a0565b6105cf565b005b3480156101ca575f5ffd5b506101d361070e565b6040516101e091906118ed565b60405180910390f35b61020360048036038101906101fe9190611906565b610724565b005b348015610210575f5ffd5b5061022b60048036038101906102269190611956565b6109ce565b604051610239929190611994565b60405180910390f35b34801561024d575f5ffd5b50610268600480360381019061026391906118a0565b6109ff565b60405161027591906118ed565b60405180910390f35b61029860048036038101906102939190611906565b610aa2565b005b3480156102a5575f5ffd5b506102c060048036038101906102bb91906117f3565b610ac1565b6040516102cd91906118ed565b60405180910390f35b3480156102e1575f5ffd5b506102fc60048036038101906102f791906117f3565b610b33565b604051610309919061185d565b60405180910390f35b34801561031d575f5ffd5b50610338600480360381019061033391906119bb565b610b44565b60405161034591906118ed565b60405180910390f35b348015610359575f5ffd5b50610362610bf9565b60405161036f91906117a0565b60405180910390f35b348015610383575f5ffd5b5061039e60048036038101906103999190611a10565b610c89565b005b6103ba60048036038101906103b59190611b7a565b610d8f565b005b3480156103c7575f5ffd5b506103e260048036038101906103dd91906117f3565b610e01565b6040516103ef91906117a0565b60405180910390f35b348015610403575f5ffd5b5061041e60048036038101906104199190611bfa565b610e9c565b60405161042b9190611717565b60405180910390f35b5f6301ffc9a760e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061048e57506380ac58cd60e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806104be5750635b5e139f60e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b9050919050565b6060600680546104d490611c65565b80601f016020809104026020016040519081016040528092919081815260200182805461050090611c65565b801561054b5780601f106105225761010080835404028352916020019161054b565b820191905f5260205f20905b81548152906001019060200180831161052e57829003601f168201915b5050505050905090565b5f61055f82610f2a565b610595576040517fcf4700e400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600a5f8381526020019081526020015f205f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b5f6105d982610b33565b90508073ffffffffffffffffffffffffffffffffffffffff166105fa610f85565b73ffffffffffffffffffffffffffffffffffffffff161461065d5761062681610621610f85565b610e9c565b61065c576040517fcfb3b94200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5b82600a5f8481526020019081526020015f205f015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550818373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a4505050565b5f610717610f8c565b6005546004540303905090565b5f61072e82610f93565b90508373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610795576040517fa114810000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f5f6107a084611057565b915091506107b681876107b1610f85565b61107a565b610802576107cb866107c6610f85565b610e9c565b610801576040517f59c896be00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5b61080f86868660016110bd565b8015610819575f82555b60095f8773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8154600190039190508190555060095f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8154600101919050819055506108e1856108bd8888876110c3565b7c0200000000000000000000000000000000000000000000000000000000176110ea565b60085f8681526020019081526020015f20819055505f7c020000000000000000000000000000000000000000000000000000000084160361095e575f6001850190505f60085f8381526020019081526020015f20540361095c57600454811461095b578360085f8381526020019081526020015f20819055505b5b505b838573ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46109c68686866001611114565b505050505050565b5f5f6109e16109db610f85565b30610e9c565b156109f1575f5f915091506109f8565b5f5f915091505b9250929050565b5f610a0983610b44565b8210610a4e5782826040517fa57d13dc000000000000000000000000000000000000000000000000000000008152600401610a45929190611994565b60405180910390fd5b5f5f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8381526020019081526020015f2054905092915050565b610abc83838360405180602001604052805f815250610d8f565b505050565b5f610aca61070e565b8210610b0f575f826040517fa57d13dc000000000000000000000000000000000000000000000000000000008152600401610b06929190611994565b60405180910390fd5b60028281548110610b2357610b22611c95565b5b905f5260205f2001549050919050565b5f610b3d82610f93565b9050919050565b5f5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610baa576040517f8f4eb60400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b67ffffffffffffffff60095f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054169050919050565b606060078054610c0890611c65565b80601f0160208091040260200160405190810160405280929190818152602001828054610c3490611c65565b8015610c7f5780601f10610c5657610100808354040283529160200191610c7f565b820191905f5260205f20905b815481529060010190602001808311610c6257829003601f168201915b5050505050905090565b80600b5f610c95610f85565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff16610d3e610f85565b73ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051610d839190611717565b60405180910390a35050565b610d9a848484610724565b5f8373ffffffffffffffffffffffffffffffffffffffff163b14610dfb57610dc48484848461114c565b610dfa576040517fd1a57ed600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5b50505050565b6060610e0c82610f2a565b610e42576040517fa14c4b5000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f610e4b611297565b90505f815103610e695760405180602001604052805f815250610e94565b80610e73846112ad565b604051602001610e84929190611d46565b6040516020818303038152906040525b915050919050565b5f600b5f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff16905092915050565b5f81610f34610f8c565b11158015610f43575060045482105b8015610f7e57505f7c010000000000000000000000000000000000000000000000000000000060085f8581526020019081526020015f205416145b9050919050565b5f33905090565b5f5f905090565b5f5f82905080610fa1610f8c565b116110205760045481101561101f575f60085f8381526020019081526020015f205490505f7c010000000000000000000000000000000000000000000000000000000082160361101d575b5f81036110135760085f836001900393508381526020019081526020015f20549050610fec565b8092505050611052565b505b5b6040517fdf2d9b4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b919050565b5f5f5f600a5f8581526020019081526020015f2090508092508254915050915091565b5f73ffffffffffffffffffffffffffffffffffffffff8316925073ffffffffffffffffffffffffffffffffffffffff821691508382148383141790509392505050565b50505050565b5f5f60e883901c905060e86110d98686846112fc565b62ffffff16901b9150509392505050565b5f73ffffffffffffffffffffffffffffffffffffffff83169250814260a01b178317905092915050565b5f5f90505b8181101561114557611137858583866111329190611da1565b611304565b508080600101915050611119565b5050505050565b5f8373ffffffffffffffffffffffffffffffffffffffff1663150b7a02611171610f85565b8786866040518563ffffffff1660e01b81526004016111939493929190611e26565b6020604051808303815f875af19250505080156111ce57506040513d601f19601f820116820180604052508101906111cb9190611e84565b60015b611244573d805f81146111fc576040519150601f19603f3d011682016040523d82523d5f602084013e611201565b606091505b505f81510361123c576040517fd1a57ed600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050949350505050565b606060405180602001604052805f815250905090565b606060a060405101806040526020810391505f825281835b6001156112e757600184039350600a81066030018453600a81049050806112c5575b50828103602084039350808452505050919050565b5f9392505050565b5f5f73ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603611346576113418261140f565b611385565b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614611384576113838483611453565b5b5b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036113c6576113c182611529565b611405565b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16146114045761140383836115e9565b5b5b8390509392505050565b60028054905060035f8381526020019081526020015f2081905550600281908060018154018082558091505060019003905f5260205f20015f909190919091505550565b5f61145d83610b44565b90505f60015f8481526020019081526020015f205490505f5f5f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2090508282146114fb575f815f8581526020019081526020015f2054905080825f8581526020019081526020015f20819055508260015f8381526020019081526020015f2081905550505b60015f8581526020019081526020015f205f9055805f8481526020019081526020015f205f90555050505050565b5f600160028054905061153c9190611eaf565b90505f60035f8481526020019081526020015f205490505f6002838154811061156857611567611c95565b5b905f5260205f2001549050806002838154811061158857611587611c95565b5b905f5260205f2001819055508160035f8381526020019081526020015f208190555060035f8581526020019081526020015f205f905560028054806115d0576115cf611ee2565b5b600190038181905f5260205f20015f9055905550505050565b5f60016115f584610b44565b6115ff9190611eaf565b9050815f5f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8381526020019081526020015f20819055508060015f8481526020019081526020015f2081905550505050565b5f604051905090565b5f5ffd5b5f5ffd5b5f7fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6116b18161167d565b81146116bb575f5ffd5b50565b5f813590506116cc816116a8565b92915050565b5f602082840312156116e7576116e6611675565b5b5f6116f4848285016116be565b91505092915050565b5f8115159050919050565b611711816116fd565b82525050565b5f60208201905061172a5f830184611708565b92915050565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f601f19601f8301169050919050565b5f61177282611730565b61177c818561173a565b935061178c81856020860161174a565b61179581611758565b840191505092915050565b5f6020820190508181035f8301526117b88184611768565b905092915050565b5f819050919050565b6117d2816117c0565b81146117dc575f5ffd5b50565b5f813590506117ed816117c9565b92915050565b5f6020828403121561180857611807611675565b5b5f611815848285016117df565b91505092915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6118478261181e565b9050919050565b6118578161183d565b82525050565b5f6020820190506118705f83018461184e565b92915050565b61187f8161183d565b8114611889575f5ffd5b50565b5f8135905061189a81611876565b92915050565b5f5f604083850312156118b6576118b5611675565b5b5f6118c38582860161188c565b92505060206118d4858286016117df565b9150509250929050565b6118e7816117c0565b82525050565b5f6020820190506119005f8301846118de565b92915050565b5f5f5f6060848603121561191d5761191c611675565b5b5f61192a8682870161188c565b935050602061193b8682870161188c565b925050604061194c868287016117df565b9150509250925092565b5f5f6040838503121561196c5761196b611675565b5b5f611979858286016117df565b925050602061198a858286016117df565b9150509250929050565b5f6040820190506119a75f83018561184e565b6119b460208301846118de565b9392505050565b5f602082840312156119d0576119cf611675565b5b5f6119dd8482850161188c565b91505092915050565b6119ef816116fd565b81146119f9575f5ffd5b50565b5f81359050611a0a816119e6565b92915050565b5f5f60408385031215611a2657611a25611675565b5b5f611a338582860161188c565b9250506020611a44858286016119fc565b9150509250929050565b5f5ffd5b5f5ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b611a8c82611758565b810181811067ffffffffffffffff82111715611aab57611aaa611a56565b5b80604052505050565b5f611abd61166c565b9050611ac98282611a83565b919050565b5f67ffffffffffffffff821115611ae857611ae7611a56565b5b611af182611758565b9050602081019050919050565b828183375f83830152505050565b5f611b1e611b1984611ace565b611ab4565b905082815260208101848484011115611b3a57611b39611a52565b5b611b45848285611afe565b509392505050565b5f82601f830112611b6157611b60611a4e565b5b8135611b71848260208601611b0c565b91505092915050565b5f5f5f5f60808587031215611b9257611b91611675565b5b5f611b9f8782880161188c565b9450506020611bb08782880161188c565b9350506040611bc1878288016117df565b925050606085013567ffffffffffffffff811115611be257611be1611679565b5b611bee87828801611b4d565b91505092959194509250565b5f5f60408385031215611c1057611c0f611675565b5b5f611c1d8582860161188c565b9250506020611c2e8582860161188c565b9150509250929050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f6002820490506001821680611c7c57607f821691505b602082108103611c8f57611c8e611c38565b5b50919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b5f81905092915050565b5f611cd682611730565b611ce08185611cc2565b9350611cf081856020860161174a565b80840191505092915050565b7f2e6a736f6e0000000000000000000000000000000000000000000000000000005f82015250565b5f611d30600583611cc2565b9150611d3b82611cfc565b600582019050919050565b5f611d518285611ccc565b9150611d5d8284611ccc565b9150611d6882611d24565b91508190509392505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f611dab826117c0565b9150611db6836117c0565b9250828201905080821115611dce57611dcd611d74565b5b92915050565b5f81519050919050565b5f82825260208201905092915050565b5f611df882611dd4565b611e028185611dde565b9350611e1281856020860161174a565b611e1b81611758565b840191505092915050565b5f608082019050611e395f83018761184e565b611e46602083018661184e565b611e5360408301856118de565b8181036060830152611e658184611dee565b905095945050505050565b5f81519050611e7e816116a8565b92915050565b5f60208284031215611e9957611e98611675565b5b5f611ea684828501611e70565b91505092915050565b5f611eb9826117c0565b9150611ec4836117c0565b9250828203905081811115611edc57611edb611d74565b5b92915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603160045260245ffdfea26469706673582212201803e27002b059d632f332594e8fe9dfc86117779c9273f3789a84a6b72d005e64736f6c634300081e0033",
}

// Ierc721 is an auto generated Go binding around an Ethereum contract.
type Ierc721 struct {
	abi abi.ABI
}

// NewIerc721 creates a new instance of Ierc721.
func NewIerc721() *Ierc721 {
	parsed, err := Ierc721MetaData.ParseABI()
	if err != nil {
		panic(errors.New("invalid ABI: " + err.Error()))
	}
	return &Ierc721{abi: *parsed}
}

// Instance creates a wrapper for a deployed contract instance at the given address.
// Use this to create the instance object passed to abigen v2 library functions Call, Transact, etc.
func (c *Ierc721) Instance(backend bind.ContractBackend, addr common.Address) *bind.BoundContract {
	return bind.NewBoundContract(addr, c.abi, backend, backend, backend)
}

// PackConstructor is the Go binding used to pack the parameters required for
// contract deployment.
//
// Solidity: constructor(string name_, string symbol_) returns()
func (ierc721 *Ierc721) PackConstructor(name_ string, symbol_ string) []byte {
	enc, err := ierc721.abi.Pack("", name_, symbol_)
	if err != nil {
		panic(err)
	}
	return enc
}

// PackApprove is the Go binding used to pack the parameters required for calling
// the contract method with ID 0x095ea7b3.  This method will panic if any
// invalid/nil inputs are passed.
//
// Solidity: function approve(address to, uint256 tokenId) payable returns()
func (ierc721 *Ierc721) PackApprove(to common.Address, tokenId *big.Int) []byte {
	enc, err := ierc721.abi.Pack("approve", to, tokenId)
	if err != nil {
		panic(err)
	}
	return enc
}

// TryPackApprove is the Go binding used to pack the parameters required for calling
// the contract method with ID 0x095ea7b3.  This method will return an error
// if any inputs are invalid/nil.
//
// Solidity: function approve(address to, uint256 tokenId) payable returns()
func (ierc721 *Ierc721) TryPackApprove(to common.Address, tokenId *big.Int) ([]byte, error) {
	return ierc721.abi.Pack("approve", to, tokenId)
}

// PackBalanceOf is the Go binding used to pack the parameters required for calling
// the contract method with ID 0x70a08231.  This method will panic if any
// invalid/nil inputs are passed.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (ierc721 *Ierc721) PackBalanceOf(owner common.Address) []byte {
	enc, err := ierc721.abi.Pack("balanceOf", owner)
	if err != nil {
		panic(err)
	}
	return enc
}

// TryPackBalanceOf is the Go binding used to pack the parameters required for calling
// the contract method with ID 0x70a08231.  This method will return an error
// if any inputs are invalid/nil.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (ierc721 *Ierc721) TryPackBalanceOf(owner common.Address) ([]byte, error) {
	return ierc721.abi.Pack("balanceOf", owner)
}

// UnpackBalanceOf is the Go binding that unpacks the parameters returned
// from invoking the contract method with ID 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (ierc721 *Ierc721) UnpackBalanceOf(data []byte) (*big.Int, error) {
	out, err := ierc721.abi.Unpack("balanceOf", data)
	if err != nil {
		return new(big.Int), err
	}
	out0 := abi.ConvertType(out[0], new(big.Int)).(*big.Int)
	return out0, nil
}

// PackGetApproved is the Go binding used to pack the parameters required for calling
// the contract method with ID 0x081812fc.  This method will panic if any
// invalid/nil inputs are passed.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (ierc721 *Ierc721) PackGetApproved(tokenId *big.Int) []byte {
	enc, err := ierc721.abi.Pack("getApproved", tokenId)
	if err != nil {
		panic(err)
	}
	return enc
}

// TryPackGetApproved is the Go binding used to pack the parameters required for calling
// the contract method with ID 0x081812fc.  This method will return an error
// if any inputs are invalid/nil.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (ierc721 *Ierc721) TryPackGetApproved(tokenId *big.Int) ([]byte, error) {
	return ierc721.abi.Pack("getApproved", tokenId)
}

// UnpackGetApproved is the Go binding that unpacks the parameters returned
// from invoking the contract method with ID 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (ierc721 *Ierc721) UnpackGetApproved(data []byte) (common.Address, error) {
	out, err := ierc721.abi.Unpack("getApproved", data)
	if err != nil {
		return *new(common.Address), err
	}
	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	return out0, nil
}

// PackIsApprovedForAll is the Go binding used to pack the parameters required for calling
// the contract method with ID 0xe985e9c5.  This method will panic if any
// invalid/nil inputs are passed.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (ierc721 *Ierc721) PackIsApprovedForAll(owner common.Address, operator common.Address) []byte {
	enc, err := ierc721.abi.Pack("isApprovedForAll", owner, operator)
	if err != nil {
		panic(err)
	}
	return enc
}

// TryPackIsApprovedForAll is the Go binding used to pack the parameters required for calling
// the contract method with ID 0xe985e9c5.  This method will return an error
// if any inputs are invalid/nil.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (ierc721 *Ierc721) TryPackIsApprovedForAll(owner common.Address, operator common.Address) ([]byte, error) {
	return ierc721.abi.Pack("isApprovedForAll", owner, operator)
}

// UnpackIsApprovedForAll is the Go binding that unpacks the parameters returned
// from invoking the contract method with ID 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (ierc721 *Ierc721) UnpackIsApprovedForAll(data []byte) (bool, error) {
	out, err := ierc721.abi.Unpack("isApprovedForAll", data)
	if err != nil {
		return *new(bool), err
	}
	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)
	return out0, nil
}

// PackName is the Go binding used to pack the parameters required for calling
// the contract method with ID 0x06fdde03.  This method will panic if any
// invalid/nil inputs are passed.
//
// Solidity: function name() view returns(string)
func (ierc721 *Ierc721) PackName() []byte {
	enc, err := ierc721.abi.Pack("name")
	if err != nil {
		panic(err)
	}
	return enc
}

// TryPackName is the Go binding used to pack the parameters required for calling
// the contract method with ID 0x06fdde03.  This method will return an error
// if any inputs are invalid/nil.
//
// Solidity: function name() view returns(string)
func (ierc721 *Ierc721) TryPackName() ([]byte, error) {
	return ierc721.abi.Pack("name")
}

// UnpackName is the Go binding that unpacks the parameters returned
// from invoking the contract method with ID 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (ierc721 *Ierc721) UnpackName(data []byte) (string, error) {
	out, err := ierc721.abi.Unpack("name", data)
	if err != nil {
		return *new(string), err
	}
	out0 := *abi.ConvertType(out[0], new(string)).(*string)
	return out0, nil
}

// PackOwnerOf is the Go binding used to pack the parameters required for calling
// the contract method with ID 0x6352211e.  This method will panic if any
// invalid/nil inputs are passed.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (ierc721 *Ierc721) PackOwnerOf(tokenId *big.Int) []byte {
	enc, err := ierc721.abi.Pack("ownerOf", tokenId)
	if err != nil {
		panic(err)
	}
	return enc
}

// TryPackOwnerOf is the Go binding used to pack the parameters required for calling
// the contract method with ID 0x6352211e.  This method will return an error
// if any inputs are invalid/nil.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (ierc721 *Ierc721) TryPackOwnerOf(tokenId *big.Int) ([]byte, error) {
	return ierc721.abi.Pack("ownerOf", tokenId)
}

// UnpackOwnerOf is the Go binding that unpacks the parameters returned
// from invoking the contract method with ID 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (ierc721 *Ierc721) UnpackOwnerOf(data []byte) (common.Address, error) {
	out, err := ierc721.abi.Unpack("ownerOf", data)
	if err != nil {
		return *new(common.Address), err
	}
	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	return out0, nil
}

// PackRoyaltyInfo is the Go binding used to pack the parameters required for calling
// the contract method with ID 0x2a55205a.  This method will panic if any
// invalid/nil inputs are passed.
//
// Solidity: function royaltyInfo(uint256 , uint256 ) view returns(address receiver, uint256 royaltyAmount)
func (ierc721 *Ierc721) PackRoyaltyInfo(arg0 *big.Int, arg1 *big.Int) []byte {
	enc, err := ierc721.abi.Pack("royaltyInfo", arg0, arg1)
	if err != nil {
		panic(err)
	}
	return enc
}

// TryPackRoyaltyInfo is the Go binding used to pack the parameters required for calling
// the contract method with ID 0x2a55205a.  This method will return an error
// if any inputs are invalid/nil.
//
// Solidity: function royaltyInfo(uint256 , uint256 ) view returns(address receiver, uint256 royaltyAmount)
func (ierc721 *Ierc721) TryPackRoyaltyInfo(arg0 *big.Int, arg1 *big.Int) ([]byte, error) {
	return ierc721.abi.Pack("royaltyInfo", arg0, arg1)
}

// RoyaltyInfoOutput serves as a container for the return parameters of contract
// method RoyaltyInfo.
type RoyaltyInfoOutput struct {
	Receiver      common.Address
	RoyaltyAmount *big.Int
}

// UnpackRoyaltyInfo is the Go binding that unpacks the parameters returned
// from invoking the contract method with ID 0x2a55205a.
//
// Solidity: function royaltyInfo(uint256 , uint256 ) view returns(address receiver, uint256 royaltyAmount)
func (ierc721 *Ierc721) UnpackRoyaltyInfo(data []byte) (RoyaltyInfoOutput, error) {
	out, err := ierc721.abi.Unpack("royaltyInfo", data)
	outstruct := new(RoyaltyInfoOutput)
	if err != nil {
		return *outstruct, err
	}
	outstruct.Receiver = *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	outstruct.RoyaltyAmount = abi.ConvertType(out[1], new(big.Int)).(*big.Int)
	return *outstruct, nil
}

// PackSafeTransferFrom is the Go binding used to pack the parameters required for calling
// the contract method with ID 0x42842e0e.  This method will panic if any
// invalid/nil inputs are passed.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) payable returns()
func (ierc721 *Ierc721) PackSafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) []byte {
	enc, err := ierc721.abi.Pack("safeTransferFrom", from, to, tokenId)
	if err != nil {
		panic(err)
	}
	return enc
}

// TryPackSafeTransferFrom is the Go binding used to pack the parameters required for calling
// the contract method with ID 0x42842e0e.  This method will return an error
// if any inputs are invalid/nil.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) payable returns()
func (ierc721 *Ierc721) TryPackSafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) ([]byte, error) {
	return ierc721.abi.Pack("safeTransferFrom", from, to, tokenId)
}

// PackSafeTransferFrom0 is the Go binding used to pack the parameters required for calling
// the contract method with ID 0xb88d4fde.  This method will panic if any
// invalid/nil inputs are passed.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) payable returns()
func (ierc721 *Ierc721) PackSafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, data []byte) []byte {
	enc, err := ierc721.abi.Pack("safeTransferFrom0", from, to, tokenId, data)
	if err != nil {
		panic(err)
	}
	return enc
}

// TryPackSafeTransferFrom0 is the Go binding used to pack the parameters required for calling
// the contract method with ID 0xb88d4fde.  This method will return an error
// if any inputs are invalid/nil.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) payable returns()
func (ierc721 *Ierc721) TryPackSafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, data []byte) ([]byte, error) {
	return ierc721.abi.Pack("safeTransferFrom0", from, to, tokenId, data)
}

// PackSetApprovalForAll is the Go binding used to pack the parameters required for calling
// the contract method with ID 0xa22cb465.  This method will panic if any
// invalid/nil inputs are passed.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (ierc721 *Ierc721) PackSetApprovalForAll(operator common.Address, approved bool) []byte {
	enc, err := ierc721.abi.Pack("setApprovalForAll", operator, approved)
	if err != nil {
		panic(err)
	}
	return enc
}

// TryPackSetApprovalForAll is the Go binding used to pack the parameters required for calling
// the contract method with ID 0xa22cb465.  This method will return an error
// if any inputs are invalid/nil.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (ierc721 *Ierc721) TryPackSetApprovalForAll(operator common.Address, approved bool) ([]byte, error) {
	return ierc721.abi.Pack("setApprovalForAll", operator, approved)
}

// PackSupportsInterface is the Go binding used to pack the parameters required for calling
// the contract method with ID 0x01ffc9a7.  This method will panic if any
// invalid/nil inputs are passed.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (ierc721 *Ierc721) PackSupportsInterface(interfaceId [4]byte) []byte {
	enc, err := ierc721.abi.Pack("supportsInterface", interfaceId)
	if err != nil {
		panic(err)
	}
	return enc
}

// TryPackSupportsInterface is the Go binding used to pack the parameters required for calling
// the contract method with ID 0x01ffc9a7.  This method will return an error
// if any inputs are invalid/nil.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (ierc721 *Ierc721) TryPackSupportsInterface(interfaceId [4]byte) ([]byte, error) {
	return ierc721.abi.Pack("supportsInterface", interfaceId)
}

// UnpackSupportsInterface is the Go binding that unpacks the parameters returned
// from invoking the contract method with ID 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (ierc721 *Ierc721) UnpackSupportsInterface(data []byte) (bool, error) {
	out, err := ierc721.abi.Unpack("supportsInterface", data)
	if err != nil {
		return *new(bool), err
	}
	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)
	return out0, nil
}

// PackSymbol is the Go binding used to pack the parameters required for calling
// the contract method with ID 0x95d89b41.  This method will panic if any
// invalid/nil inputs are passed.
//
// Solidity: function symbol() view returns(string)
func (ierc721 *Ierc721) PackSymbol() []byte {
	enc, err := ierc721.abi.Pack("symbol")
	if err != nil {
		panic(err)
	}
	return enc
}

// TryPackSymbol is the Go binding used to pack the parameters required for calling
// the contract method with ID 0x95d89b41.  This method will return an error
// if any inputs are invalid/nil.
//
// Solidity: function symbol() view returns(string)
func (ierc721 *Ierc721) TryPackSymbol() ([]byte, error) {
	return ierc721.abi.Pack("symbol")
}

// UnpackSymbol is the Go binding that unpacks the parameters returned
// from invoking the contract method with ID 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (ierc721 *Ierc721) UnpackSymbol(data []byte) (string, error) {
	out, err := ierc721.abi.Unpack("symbol", data)
	if err != nil {
		return *new(string), err
	}
	out0 := *abi.ConvertType(out[0], new(string)).(*string)
	return out0, nil
}

// PackTokenByIndex is the Go binding used to pack the parameters required for calling
// the contract method with ID 0x4f6ccce7.  This method will panic if any
// invalid/nil inputs are passed.
//
// Solidity: function tokenByIndex(uint256 index) view returns(uint256)
func (ierc721 *Ierc721) PackTokenByIndex(index *big.Int) []byte {
	enc, err := ierc721.abi.Pack("tokenByIndex", index)
	if err != nil {
		panic(err)
	}
	return enc
}

// TryPackTokenByIndex is the Go binding used to pack the parameters required for calling
// the contract method with ID 0x4f6ccce7.  This method will return an error
// if any inputs are invalid/nil.
//
// Solidity: function tokenByIndex(uint256 index) view returns(uint256)
func (ierc721 *Ierc721) TryPackTokenByIndex(index *big.Int) ([]byte, error) {
	return ierc721.abi.Pack("tokenByIndex", index)
}

// UnpackTokenByIndex is the Go binding that unpacks the parameters returned
// from invoking the contract method with ID 0x4f6ccce7.
//
// Solidity: function tokenByIndex(uint256 index) view returns(uint256)
func (ierc721 *Ierc721) UnpackTokenByIndex(data []byte) (*big.Int, error) {
	out, err := ierc721.abi.Unpack("tokenByIndex", data)
	if err != nil {
		return new(big.Int), err
	}
	out0 := abi.ConvertType(out[0], new(big.Int)).(*big.Int)
	return out0, nil
}

// PackTokenOfOwnerByIndex is the Go binding used to pack the parameters required for calling
// the contract method with ID 0x2f745c59.  This method will panic if any
// invalid/nil inputs are passed.
//
// Solidity: function tokenOfOwnerByIndex(address owner, uint256 index) view returns(uint256)
func (ierc721 *Ierc721) PackTokenOfOwnerByIndex(owner common.Address, index *big.Int) []byte {
	enc, err := ierc721.abi.Pack("tokenOfOwnerByIndex", owner, index)
	if err != nil {
		panic(err)
	}
	return enc
}

// TryPackTokenOfOwnerByIndex is the Go binding used to pack the parameters required for calling
// the contract method with ID 0x2f745c59.  This method will return an error
// if any inputs are invalid/nil.
//
// Solidity: function tokenOfOwnerByIndex(address owner, uint256 index) view returns(uint256)
func (ierc721 *Ierc721) TryPackTokenOfOwnerByIndex(owner common.Address, index *big.Int) ([]byte, error) {
	return ierc721.abi.Pack("tokenOfOwnerByIndex", owner, index)
}

// UnpackTokenOfOwnerByIndex is the Go binding that unpacks the parameters returned
// from invoking the contract method with ID 0x2f745c59.
//
// Solidity: function tokenOfOwnerByIndex(address owner, uint256 index) view returns(uint256)
func (ierc721 *Ierc721) UnpackTokenOfOwnerByIndex(data []byte) (*big.Int, error) {
	out, err := ierc721.abi.Unpack("tokenOfOwnerByIndex", data)
	if err != nil {
		return new(big.Int), err
	}
	out0 := abi.ConvertType(out[0], new(big.Int)).(*big.Int)
	return out0, nil
}

// PackTokenURI is the Go binding used to pack the parameters required for calling
// the contract method with ID 0xc87b56dd.  This method will panic if any
// invalid/nil inputs are passed.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (ierc721 *Ierc721) PackTokenURI(tokenId *big.Int) []byte {
	enc, err := ierc721.abi.Pack("tokenURI", tokenId)
	if err != nil {
		panic(err)
	}
	return enc
}

// TryPackTokenURI is the Go binding used to pack the parameters required for calling
// the contract method with ID 0xc87b56dd.  This method will return an error
// if any inputs are invalid/nil.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (ierc721 *Ierc721) TryPackTokenURI(tokenId *big.Int) ([]byte, error) {
	return ierc721.abi.Pack("tokenURI", tokenId)
}

// UnpackTokenURI is the Go binding that unpacks the parameters returned
// from invoking the contract method with ID 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (ierc721 *Ierc721) UnpackTokenURI(data []byte) (string, error) {
	out, err := ierc721.abi.Unpack("tokenURI", data)
	if err != nil {
		return *new(string), err
	}
	out0 := *abi.ConvertType(out[0], new(string)).(*string)
	return out0, nil
}

// PackTotalSupply is the Go binding used to pack the parameters required for calling
// the contract method with ID 0x18160ddd.  This method will panic if any
// invalid/nil inputs are passed.
//
// Solidity: function totalSupply() view returns(uint256)
func (ierc721 *Ierc721) PackTotalSupply() []byte {
	enc, err := ierc721.abi.Pack("totalSupply")
	if err != nil {
		panic(err)
	}
	return enc
}

// TryPackTotalSupply is the Go binding used to pack the parameters required for calling
// the contract method with ID 0x18160ddd.  This method will return an error
// if any inputs are invalid/nil.
//
// Solidity: function totalSupply() view returns(uint256)
func (ierc721 *Ierc721) TryPackTotalSupply() ([]byte, error) {
	return ierc721.abi.Pack("totalSupply")
}

// UnpackTotalSupply is the Go binding that unpacks the parameters returned
// from invoking the contract method with ID 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (ierc721 *Ierc721) UnpackTotalSupply(data []byte) (*big.Int, error) {
	out, err := ierc721.abi.Unpack("totalSupply", data)
	if err != nil {
		return new(big.Int), err
	}
	out0 := abi.ConvertType(out[0], new(big.Int)).(*big.Int)
	return out0, nil
}

// PackTransferFrom is the Go binding used to pack the parameters required for calling
// the contract method with ID 0x23b872dd.  This method will panic if any
// invalid/nil inputs are passed.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) payable returns()
func (ierc721 *Ierc721) PackTransferFrom(from common.Address, to common.Address, tokenId *big.Int) []byte {
	enc, err := ierc721.abi.Pack("transferFrom", from, to, tokenId)
	if err != nil {
		panic(err)
	}
	return enc
}

// TryPackTransferFrom is the Go binding used to pack the parameters required for calling
// the contract method with ID 0x23b872dd.  This method will return an error
// if any inputs are invalid/nil.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) payable returns()
func (ierc721 *Ierc721) TryPackTransferFrom(from common.Address, to common.Address, tokenId *big.Int) ([]byte, error) {
	return ierc721.abi.Pack("transferFrom", from, to, tokenId)
}

// Ierc721Approval represents a Approval event raised by the Ierc721 contract.
type Ierc721Approval struct {
	Owner    common.Address
	Approved common.Address
	TokenId  *big.Int
	Raw      *types.Log // Blockchain specific contextual infos
}

const Ierc721ApprovalEventName = "Approval"

// ContractEventName returns the user-defined event name.
func (Ierc721Approval) ContractEventName() string {
	return Ierc721ApprovalEventName
}

// UnpackApprovalEvent is the Go binding that unpacks the event data emitted
// by contract.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (ierc721 *Ierc721) UnpackApprovalEvent(log *types.Log) (*Ierc721Approval, error) {
	event := "Approval"
	if log.Topics[0] != ierc721.abi.Events[event].ID {
		return nil, errors.New("event signature mismatch")
	}
	out := new(Ierc721Approval)
	if len(log.Data) > 0 {
		if err := ierc721.abi.UnpackIntoInterface(out, event, log.Data); err != nil {
			return nil, err
		}
	}
	var indexed abi.Arguments
	for _, arg := range ierc721.abi.Events[event].Inputs {
		if arg.Indexed {
			indexed = append(indexed, arg)
		}
	}
	if err := abi.ParseTopics(out, indexed, log.Topics[1:]); err != nil {
		return nil, err
	}
	out.Raw = log
	return out, nil
}

// Ierc721ApprovalForAll represents a ApprovalForAll event raised by the Ierc721 contract.
type Ierc721ApprovalForAll struct {
	Owner    common.Address
	Operator common.Address
	Approved bool
	Raw      *types.Log // Blockchain specific contextual infos
}

const Ierc721ApprovalForAllEventName = "ApprovalForAll"

// ContractEventName returns the user-defined event name.
func (Ierc721ApprovalForAll) ContractEventName() string {
	return Ierc721ApprovalForAllEventName
}

// UnpackApprovalForAllEvent is the Go binding that unpacks the event data emitted
// by contract.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (ierc721 *Ierc721) UnpackApprovalForAllEvent(log *types.Log) (*Ierc721ApprovalForAll, error) {
	event := "ApprovalForAll"
	if log.Topics[0] != ierc721.abi.Events[event].ID {
		return nil, errors.New("event signature mismatch")
	}
	out := new(Ierc721ApprovalForAll)
	if len(log.Data) > 0 {
		if err := ierc721.abi.UnpackIntoInterface(out, event, log.Data); err != nil {
			return nil, err
		}
	}
	var indexed abi.Arguments
	for _, arg := range ierc721.abi.Events[event].Inputs {
		if arg.Indexed {
			indexed = append(indexed, arg)
		}
	}
	if err := abi.ParseTopics(out, indexed, log.Topics[1:]); err != nil {
		return nil, err
	}
	out.Raw = log
	return out, nil
}

// Ierc721ConsecutiveTransfer represents a ConsecutiveTransfer event raised by the Ierc721 contract.
type Ierc721ConsecutiveTransfer struct {
	FromTokenId *big.Int
	ToTokenId   *big.Int
	From        common.Address
	To          common.Address
	Raw         *types.Log // Blockchain specific contextual infos
}

const Ierc721ConsecutiveTransferEventName = "ConsecutiveTransfer"

// ContractEventName returns the user-defined event name.
func (Ierc721ConsecutiveTransfer) ContractEventName() string {
	return Ierc721ConsecutiveTransferEventName
}

// UnpackConsecutiveTransferEvent is the Go binding that unpacks the event data emitted
// by contract.
//
// Solidity: event ConsecutiveTransfer(uint256 indexed fromTokenId, uint256 toTokenId, address indexed from, address indexed to)
func (ierc721 *Ierc721) UnpackConsecutiveTransferEvent(log *types.Log) (*Ierc721ConsecutiveTransfer, error) {
	event := "ConsecutiveTransfer"
	if log.Topics[0] != ierc721.abi.Events[event].ID {
		return nil, errors.New("event signature mismatch")
	}
	out := new(Ierc721ConsecutiveTransfer)
	if len(log.Data) > 0 {
		if err := ierc721.abi.UnpackIntoInterface(out, event, log.Data); err != nil {
			return nil, err
		}
	}
	var indexed abi.Arguments
	for _, arg := range ierc721.abi.Events[event].Inputs {
		if arg.Indexed {
			indexed = append(indexed, arg)
		}
	}
	if err := abi.ParseTopics(out, indexed, log.Topics[1:]); err != nil {
		return nil, err
	}
	out.Raw = log
	return out, nil
}

// Ierc721Transfer represents a Transfer event raised by the Ierc721 contract.
type Ierc721Transfer struct {
	From    common.Address
	To      common.Address
	TokenId *big.Int
	Raw     *types.Log // Blockchain specific contextual infos
}

const Ierc721TransferEventName = "Transfer"

// ContractEventName returns the user-defined event name.
func (Ierc721Transfer) ContractEventName() string {
	return Ierc721TransferEventName
}

// UnpackTransferEvent is the Go binding that unpacks the event data emitted
// by contract.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (ierc721 *Ierc721) UnpackTransferEvent(log *types.Log) (*Ierc721Transfer, error) {
	event := "Transfer"
	if log.Topics[0] != ierc721.abi.Events[event].ID {
		return nil, errors.New("event signature mismatch")
	}
	out := new(Ierc721Transfer)
	if len(log.Data) > 0 {
		if err := ierc721.abi.UnpackIntoInterface(out, event, log.Data); err != nil {
			return nil, err
		}
	}
	var indexed abi.Arguments
	for _, arg := range ierc721.abi.Events[event].Inputs {
		if arg.Indexed {
			indexed = append(indexed, arg)
		}
	}
	if err := abi.ParseTopics(out, indexed, log.Topics[1:]); err != nil {
		return nil, err
	}
	out.Raw = log
	return out, nil
}

// UnpackError attempts to decode the provided error data using user-defined
// error definitions.
func (ierc721 *Ierc721) UnpackError(raw []byte) (any, error) {
	if bytes.Equal(raw[:4], ierc721.abi.Errors["ApprovalCallerNotOwnerNorApproved"].ID.Bytes()[:4]) {
		return ierc721.UnpackApprovalCallerNotOwnerNorApprovedError(raw[4:])
	}
	if bytes.Equal(raw[:4], ierc721.abi.Errors["ApprovalQueryForNonexistentToken"].ID.Bytes()[:4]) {
		return ierc721.UnpackApprovalQueryForNonexistentTokenError(raw[4:])
	}
	if bytes.Equal(raw[:4], ierc721.abi.Errors["BalanceQueryForZeroAddress"].ID.Bytes()[:4]) {
		return ierc721.UnpackBalanceQueryForZeroAddressError(raw[4:])
	}
	if bytes.Equal(raw[:4], ierc721.abi.Errors["ERC721IncorrectOwner"].ID.Bytes()[:4]) {
		return ierc721.UnpackERC721IncorrectOwnerError(raw[4:])
	}
	if bytes.Equal(raw[:4], ierc721.abi.Errors["ERC721InsufficientApproval"].ID.Bytes()[:4]) {
		return ierc721.UnpackERC721InsufficientApprovalError(raw[4:])
	}
	if bytes.Equal(raw[:4], ierc721.abi.Errors["ERC721InvalidApprover"].ID.Bytes()[:4]) {
		return ierc721.UnpackERC721InvalidApproverError(raw[4:])
	}
	if bytes.Equal(raw[:4], ierc721.abi.Errors["ERC721InvalidOperator"].ID.Bytes()[:4]) {
		return ierc721.UnpackERC721InvalidOperatorError(raw[4:])
	}
	if bytes.Equal(raw[:4], ierc721.abi.Errors["ERC721InvalidOwner"].ID.Bytes()[:4]) {
		return ierc721.UnpackERC721InvalidOwnerError(raw[4:])
	}
	if bytes.Equal(raw[:4], ierc721.abi.Errors["ERC721InvalidReceiver"].ID.Bytes()[:4]) {
		return ierc721.UnpackERC721InvalidReceiverError(raw[4:])
	}
	if bytes.Equal(raw[:4], ierc721.abi.Errors["ERC721InvalidSender"].ID.Bytes()[:4]) {
		return ierc721.UnpackERC721InvalidSenderError(raw[4:])
	}
	if bytes.Equal(raw[:4], ierc721.abi.Errors["ERC721NonexistentToken"].ID.Bytes()[:4]) {
		return ierc721.UnpackERC721NonexistentTokenError(raw[4:])
	}
	if bytes.Equal(raw[:4], ierc721.abi.Errors["ERC721OutOfBoundsIndex"].ID.Bytes()[:4]) {
		return ierc721.UnpackERC721OutOfBoundsIndexError(raw[4:])
	}
	if bytes.Equal(raw[:4], ierc721.abi.Errors["MintERC2309QuantityExceedsLimit"].ID.Bytes()[:4]) {
		return ierc721.UnpackMintERC2309QuantityExceedsLimitError(raw[4:])
	}
	if bytes.Equal(raw[:4], ierc721.abi.Errors["MintToZeroAddress"].ID.Bytes()[:4]) {
		return ierc721.UnpackMintToZeroAddressError(raw[4:])
	}
	if bytes.Equal(raw[:4], ierc721.abi.Errors["MintZeroQuantity"].ID.Bytes()[:4]) {
		return ierc721.UnpackMintZeroQuantityError(raw[4:])
	}
	if bytes.Equal(raw[:4], ierc721.abi.Errors["OwnerQueryForNonexistentToken"].ID.Bytes()[:4]) {
		return ierc721.UnpackOwnerQueryForNonexistentTokenError(raw[4:])
	}
	if bytes.Equal(raw[:4], ierc721.abi.Errors["OwnershipNotInitializedForExtraData"].ID.Bytes()[:4]) {
		return ierc721.UnpackOwnershipNotInitializedForExtraDataError(raw[4:])
	}
	if bytes.Equal(raw[:4], ierc721.abi.Errors["TransferCallerNotOwnerNorApproved"].ID.Bytes()[:4]) {
		return ierc721.UnpackTransferCallerNotOwnerNorApprovedError(raw[4:])
	}
	if bytes.Equal(raw[:4], ierc721.abi.Errors["TransferFromIncorrectOwner"].ID.Bytes()[:4]) {
		return ierc721.UnpackTransferFromIncorrectOwnerError(raw[4:])
	}
	if bytes.Equal(raw[:4], ierc721.abi.Errors["TransferToNonERC721ReceiverImplementer"].ID.Bytes()[:4]) {
		return ierc721.UnpackTransferToNonERC721ReceiverImplementerError(raw[4:])
	}
	if bytes.Equal(raw[:4], ierc721.abi.Errors["TransferToZeroAddress"].ID.Bytes()[:4]) {
		return ierc721.UnpackTransferToZeroAddressError(raw[4:])
	}
	if bytes.Equal(raw[:4], ierc721.abi.Errors["URIQueryForNonexistentToken"].ID.Bytes()[:4]) {
		return ierc721.UnpackURIQueryForNonexistentTokenError(raw[4:])
	}
	return nil, errors.New("Unknown error")
}

// Ierc721ApprovalCallerNotOwnerNorApproved represents a ApprovalCallerNotOwnerNorApproved error raised by the Ierc721 contract.
type Ierc721ApprovalCallerNotOwnerNorApproved struct {
}

// ErrorID returns the hash of canonical representation of the error's signature.
//
// Solidity: error ApprovalCallerNotOwnerNorApproved()
func Ierc721ApprovalCallerNotOwnerNorApprovedErrorID() common.Hash {
	return common.HexToHash("0xcfb3b9429a134b2b944604a735efdb2b29b197735c30602f556a6a2f1032f120")
}

// UnpackApprovalCallerNotOwnerNorApprovedError is the Go binding used to decode the provided
// error data into the corresponding Go error struct.
//
// Solidity: error ApprovalCallerNotOwnerNorApproved()
func (ierc721 *Ierc721) UnpackApprovalCallerNotOwnerNorApprovedError(raw []byte) (*Ierc721ApprovalCallerNotOwnerNorApproved, error) {
	out := new(Ierc721ApprovalCallerNotOwnerNorApproved)
	if err := ierc721.abi.UnpackIntoInterface(out, "ApprovalCallerNotOwnerNorApproved", raw); err != nil {
		return nil, err
	}
	return out, nil
}

// Ierc721ApprovalQueryForNonexistentToken represents a ApprovalQueryForNonexistentToken error raised by the Ierc721 contract.
type Ierc721ApprovalQueryForNonexistentToken struct {
}

// ErrorID returns the hash of canonical representation of the error's signature.
//
// Solidity: error ApprovalQueryForNonexistentToken()
func Ierc721ApprovalQueryForNonexistentTokenErrorID() common.Hash {
	return common.HexToHash("0xcf4700e46ed41ef04607b4e3308dff2984f54d77e296299fdaddb3cada81600f")
}

// UnpackApprovalQueryForNonexistentTokenError is the Go binding used to decode the provided
// error data into the corresponding Go error struct.
//
// Solidity: error ApprovalQueryForNonexistentToken()
func (ierc721 *Ierc721) UnpackApprovalQueryForNonexistentTokenError(raw []byte) (*Ierc721ApprovalQueryForNonexistentToken, error) {
	out := new(Ierc721ApprovalQueryForNonexistentToken)
	if err := ierc721.abi.UnpackIntoInterface(out, "ApprovalQueryForNonexistentToken", raw); err != nil {
		return nil, err
	}
	return out, nil
}

// Ierc721BalanceQueryForZeroAddress represents a BalanceQueryForZeroAddress error raised by the Ierc721 contract.
type Ierc721BalanceQueryForZeroAddress struct {
}

// ErrorID returns the hash of canonical representation of the error's signature.
//
// Solidity: error BalanceQueryForZeroAddress()
func Ierc721BalanceQueryForZeroAddressErrorID() common.Hash {
	return common.HexToHash("0x8f4eb6044d70ec5bf71516c5fb8d3c3aef5dba1bd1c93d779e9c0f269589e79c")
}

// UnpackBalanceQueryForZeroAddressError is the Go binding used to decode the provided
// error data into the corresponding Go error struct.
//
// Solidity: error BalanceQueryForZeroAddress()
func (ierc721 *Ierc721) UnpackBalanceQueryForZeroAddressError(raw []byte) (*Ierc721BalanceQueryForZeroAddress, error) {
	out := new(Ierc721BalanceQueryForZeroAddress)
	if err := ierc721.abi.UnpackIntoInterface(out, "BalanceQueryForZeroAddress", raw); err != nil {
		return nil, err
	}
	return out, nil
}

// Ierc721ERC721IncorrectOwner represents a ERC721IncorrectOwner error raised by the Ierc721 contract.
type Ierc721ERC721IncorrectOwner struct {
	Sender  common.Address
	TokenId *big.Int
	Owner   common.Address
}

// ErrorID returns the hash of canonical representation of the error's signature.
//
// Solidity: error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner)
func Ierc721ERC721IncorrectOwnerErrorID() common.Hash {
	return common.HexToHash("0x64283d7b313c8117c125f736876fa2b4e90ea3831a4716dfdb87d2f540e26289")
}

// UnpackERC721IncorrectOwnerError is the Go binding used to decode the provided
// error data into the corresponding Go error struct.
//
// Solidity: error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner)
func (ierc721 *Ierc721) UnpackERC721IncorrectOwnerError(raw []byte) (*Ierc721ERC721IncorrectOwner, error) {
	out := new(Ierc721ERC721IncorrectOwner)
	if err := ierc721.abi.UnpackIntoInterface(out, "ERC721IncorrectOwner", raw); err != nil {
		return nil, err
	}
	return out, nil
}

// Ierc721ERC721InsufficientApproval represents a ERC721InsufficientApproval error raised by the Ierc721 contract.
type Ierc721ERC721InsufficientApproval struct {
	Operator common.Address
	TokenId  *big.Int
}

// ErrorID returns the hash of canonical representation of the error's signature.
//
// Solidity: error ERC721InsufficientApproval(address operator, uint256 tokenId)
func Ierc721ERC721InsufficientApprovalErrorID() common.Hash {
	return common.HexToHash("0x177e802f6f313bc89797ecace66d6d29ab4719cbaaacbb87367264048b1eb861")
}

// UnpackERC721InsufficientApprovalError is the Go binding used to decode the provided
// error data into the corresponding Go error struct.
//
// Solidity: error ERC721InsufficientApproval(address operator, uint256 tokenId)
func (ierc721 *Ierc721) UnpackERC721InsufficientApprovalError(raw []byte) (*Ierc721ERC721InsufficientApproval, error) {
	out := new(Ierc721ERC721InsufficientApproval)
	if err := ierc721.abi.UnpackIntoInterface(out, "ERC721InsufficientApproval", raw); err != nil {
		return nil, err
	}
	return out, nil
}

// Ierc721ERC721InvalidApprover represents a ERC721InvalidApprover error raised by the Ierc721 contract.
type Ierc721ERC721InvalidApprover struct {
	Approver common.Address
}

// ErrorID returns the hash of canonical representation of the error's signature.
//
// Solidity: error ERC721InvalidApprover(address approver)
func Ierc721ERC721InvalidApproverErrorID() common.Hash {
	return common.HexToHash("0xa9fbf51f86b8e03595d59dc726bb10c329bb24f62589be276d8dd193ca0b69ea")
}

// UnpackERC721InvalidApproverError is the Go binding used to decode the provided
// error data into the corresponding Go error struct.
//
// Solidity: error ERC721InvalidApprover(address approver)
func (ierc721 *Ierc721) UnpackERC721InvalidApproverError(raw []byte) (*Ierc721ERC721InvalidApprover, error) {
	out := new(Ierc721ERC721InvalidApprover)
	if err := ierc721.abi.UnpackIntoInterface(out, "ERC721InvalidApprover", raw); err != nil {
		return nil, err
	}
	return out, nil
}

// Ierc721ERC721InvalidOperator represents a ERC721InvalidOperator error raised by the Ierc721 contract.
type Ierc721ERC721InvalidOperator struct {
	Operator common.Address
}

// ErrorID returns the hash of canonical representation of the error's signature.
//
// Solidity: error ERC721InvalidOperator(address operator)
func Ierc721ERC721InvalidOperatorErrorID() common.Hash {
	return common.HexToHash("0x5b08ba185e8f577075361f3a3555a6580a227ce22734dcc979c1aeadf894658b")
}

// UnpackERC721InvalidOperatorError is the Go binding used to decode the provided
// error data into the corresponding Go error struct.
//
// Solidity: error ERC721InvalidOperator(address operator)
func (ierc721 *Ierc721) UnpackERC721InvalidOperatorError(raw []byte) (*Ierc721ERC721InvalidOperator, error) {
	out := new(Ierc721ERC721InvalidOperator)
	if err := ierc721.abi.UnpackIntoInterface(out, "ERC721InvalidOperator", raw); err != nil {
		return nil, err
	}
	return out, nil
}

// Ierc721ERC721InvalidOwner represents a ERC721InvalidOwner error raised by the Ierc721 contract.
type Ierc721ERC721InvalidOwner struct {
	Owner common.Address
}

// ErrorID returns the hash of canonical representation of the error's signature.
//
// Solidity: error ERC721InvalidOwner(address owner)
func Ierc721ERC721InvalidOwnerErrorID() common.Hash {
	return common.HexToHash("0x89c62b6479af2e623826dcc39c5133061d35b66d72de92833401dd2fd6567480")
}

// UnpackERC721InvalidOwnerError is the Go binding used to decode the provided
// error data into the corresponding Go error struct.
//
// Solidity: error ERC721InvalidOwner(address owner)
func (ierc721 *Ierc721) UnpackERC721InvalidOwnerError(raw []byte) (*Ierc721ERC721InvalidOwner, error) {
	out := new(Ierc721ERC721InvalidOwner)
	if err := ierc721.abi.UnpackIntoInterface(out, "ERC721InvalidOwner", raw); err != nil {
		return nil, err
	}
	return out, nil
}

// Ierc721ERC721InvalidReceiver represents a ERC721InvalidReceiver error raised by the Ierc721 contract.
type Ierc721ERC721InvalidReceiver struct {
	Receiver common.Address
}

// ErrorID returns the hash of canonical representation of the error's signature.
//
// Solidity: error ERC721InvalidReceiver(address receiver)
func Ierc721ERC721InvalidReceiverErrorID() common.Hash {
	return common.HexToHash("0x64a0ae9278f805eaf991dcd18ca78756d280b7508b764ef1b255c55845c11df9")
}

// UnpackERC721InvalidReceiverError is the Go binding used to decode the provided
// error data into the corresponding Go error struct.
//
// Solidity: error ERC721InvalidReceiver(address receiver)
func (ierc721 *Ierc721) UnpackERC721InvalidReceiverError(raw []byte) (*Ierc721ERC721InvalidReceiver, error) {
	out := new(Ierc721ERC721InvalidReceiver)
	if err := ierc721.abi.UnpackIntoInterface(out, "ERC721InvalidReceiver", raw); err != nil {
		return nil, err
	}
	return out, nil
}

// Ierc721ERC721InvalidSender represents a ERC721InvalidSender error raised by the Ierc721 contract.
type Ierc721ERC721InvalidSender struct {
	Sender common.Address
}

// ErrorID returns the hash of canonical representation of the error's signature.
//
// Solidity: error ERC721InvalidSender(address sender)
func Ierc721ERC721InvalidSenderErrorID() common.Hash {
	return common.HexToHash("0x73c6ac6e10798e95d99e1f130d923eb40193ecb8d094ec3dce93292564eb3b17")
}

// UnpackERC721InvalidSenderError is the Go binding used to decode the provided
// error data into the corresponding Go error struct.
//
// Solidity: error ERC721InvalidSender(address sender)
func (ierc721 *Ierc721) UnpackERC721InvalidSenderError(raw []byte) (*Ierc721ERC721InvalidSender, error) {
	out := new(Ierc721ERC721InvalidSender)
	if err := ierc721.abi.UnpackIntoInterface(out, "ERC721InvalidSender", raw); err != nil {
		return nil, err
	}
	return out, nil
}

// Ierc721ERC721NonexistentToken represents a ERC721NonexistentToken error raised by the Ierc721 contract.
type Ierc721ERC721NonexistentToken struct {
	TokenId *big.Int
}

// ErrorID returns the hash of canonical representation of the error's signature.
//
// Solidity: error ERC721NonexistentToken(uint256 tokenId)
func Ierc721ERC721NonexistentTokenErrorID() common.Hash {
	return common.HexToHash("0x7e273289a3a9ef6670f06df7dca227856fc925e956db96980692764a8bc734d7")
}

// UnpackERC721NonexistentTokenError is the Go binding used to decode the provided
// error data into the corresponding Go error struct.
//
// Solidity: error ERC721NonexistentToken(uint256 tokenId)
func (ierc721 *Ierc721) UnpackERC721NonexistentTokenError(raw []byte) (*Ierc721ERC721NonexistentToken, error) {
	out := new(Ierc721ERC721NonexistentToken)
	if err := ierc721.abi.UnpackIntoInterface(out, "ERC721NonexistentToken", raw); err != nil {
		return nil, err
	}
	return out, nil
}

// Ierc721ERC721OutOfBoundsIndex represents a ERC721OutOfBoundsIndex error raised by the Ierc721 contract.
type Ierc721ERC721OutOfBoundsIndex struct {
	Owner common.Address
	Index *big.Int
}

// ErrorID returns the hash of canonical representation of the error's signature.
//
// Solidity: error ERC721OutOfBoundsIndex(address owner, uint256 index)
func Ierc721ERC721OutOfBoundsIndexErrorID() common.Hash {
	return common.HexToHash("0xa57d13dc78ab2b1f1191d9429a298559c44d02b5951a92c2376aa50074cc4509")
}

// UnpackERC721OutOfBoundsIndexError is the Go binding used to decode the provided
// error data into the corresponding Go error struct.
//
// Solidity: error ERC721OutOfBoundsIndex(address owner, uint256 index)
func (ierc721 *Ierc721) UnpackERC721OutOfBoundsIndexError(raw []byte) (*Ierc721ERC721OutOfBoundsIndex, error) {
	out := new(Ierc721ERC721OutOfBoundsIndex)
	if err := ierc721.abi.UnpackIntoInterface(out, "ERC721OutOfBoundsIndex", raw); err != nil {
		return nil, err
	}
	return out, nil
}

// Ierc721MintERC2309QuantityExceedsLimit represents a MintERC2309QuantityExceedsLimit error raised by the Ierc721 contract.
type Ierc721MintERC2309QuantityExceedsLimit struct {
}

// ErrorID returns the hash of canonical representation of the error's signature.
//
// Solidity: error MintERC2309QuantityExceedsLimit()
func Ierc721MintERC2309QuantityExceedsLimitErrorID() common.Hash {
	return common.HexToHash("0x3db1f9afdc4a8b6134b1f81992ec3c4e0b7e4d3131e055eb17d1a0ba02c36c37")
}

// UnpackMintERC2309QuantityExceedsLimitError is the Go binding used to decode the provided
// error data into the corresponding Go error struct.
//
// Solidity: error MintERC2309QuantityExceedsLimit()
func (ierc721 *Ierc721) UnpackMintERC2309QuantityExceedsLimitError(raw []byte) (*Ierc721MintERC2309QuantityExceedsLimit, error) {
	out := new(Ierc721MintERC2309QuantityExceedsLimit)
	if err := ierc721.abi.UnpackIntoInterface(out, "MintERC2309QuantityExceedsLimit", raw); err != nil {
		return nil, err
	}
	return out, nil
}

// Ierc721MintToZeroAddress represents a MintToZeroAddress error raised by the Ierc721 contract.
type Ierc721MintToZeroAddress struct {
}

// ErrorID returns the hash of canonical representation of the error's signature.
//
// Solidity: error MintToZeroAddress()
func Ierc721MintToZeroAddressErrorID() common.Hash {
	return common.HexToHash("0x2e076300cc9339eb5c3cef53bf1884bed209f3e8a58ca06b0a19c37ff1ae363c")
}

// UnpackMintToZeroAddressError is the Go binding used to decode the provided
// error data into the corresponding Go error struct.
//
// Solidity: error MintToZeroAddress()
func (ierc721 *Ierc721) UnpackMintToZeroAddressError(raw []byte) (*Ierc721MintToZeroAddress, error) {
	out := new(Ierc721MintToZeroAddress)
	if err := ierc721.abi.UnpackIntoInterface(out, "MintToZeroAddress", raw); err != nil {
		return nil, err
	}
	return out, nil
}

// Ierc721MintZeroQuantity represents a MintZeroQuantity error raised by the Ierc721 contract.
type Ierc721MintZeroQuantity struct {
}

// ErrorID returns the hash of canonical representation of the error's signature.
//
// Solidity: error MintZeroQuantity()
func Ierc721MintZeroQuantityErrorID() common.Hash {
	return common.HexToHash("0xb562e8dd38b8d2a6fb8156b4974f05d22935d7700877ad15fde6741bbc25fd02")
}

// UnpackMintZeroQuantityError is the Go binding used to decode the provided
// error data into the corresponding Go error struct.
//
// Solidity: error MintZeroQuantity()
func (ierc721 *Ierc721) UnpackMintZeroQuantityError(raw []byte) (*Ierc721MintZeroQuantity, error) {
	out := new(Ierc721MintZeroQuantity)
	if err := ierc721.abi.UnpackIntoInterface(out, "MintZeroQuantity", raw); err != nil {
		return nil, err
	}
	return out, nil
}

// Ierc721OwnerQueryForNonexistentToken represents a OwnerQueryForNonexistentToken error raised by the Ierc721 contract.
type Ierc721OwnerQueryForNonexistentToken struct {
}

// ErrorID returns the hash of canonical representation of the error's signature.
//
// Solidity: error OwnerQueryForNonexistentToken()
func Ierc721OwnerQueryForNonexistentTokenErrorID() common.Hash {
	return common.HexToHash("0xdf2d9b424672bd00e1e032c20dbf3b98e82895632ef5694f935500416ec6869f")
}

// UnpackOwnerQueryForNonexistentTokenError is the Go binding used to decode the provided
// error data into the corresponding Go error struct.
//
// Solidity: error OwnerQueryForNonexistentToken()
func (ierc721 *Ierc721) UnpackOwnerQueryForNonexistentTokenError(raw []byte) (*Ierc721OwnerQueryForNonexistentToken, error) {
	out := new(Ierc721OwnerQueryForNonexistentToken)
	if err := ierc721.abi.UnpackIntoInterface(out, "OwnerQueryForNonexistentToken", raw); err != nil {
		return nil, err
	}
	return out, nil
}

// Ierc721OwnershipNotInitializedForExtraData represents a OwnershipNotInitializedForExtraData error raised by the Ierc721 contract.
type Ierc721OwnershipNotInitializedForExtraData struct {
}

// ErrorID returns the hash of canonical representation of the error's signature.
//
// Solidity: error OwnershipNotInitializedForExtraData()
func Ierc721OwnershipNotInitializedForExtraDataErrorID() common.Hash {
	return common.HexToHash("0x00d581532958f43622785633cc88156b61c1db85758a0959b86c456afb2f30a4")
}

// UnpackOwnershipNotInitializedForExtraDataError is the Go binding used to decode the provided
// error data into the corresponding Go error struct.
//
// Solidity: error OwnershipNotInitializedForExtraData()
func (ierc721 *Ierc721) UnpackOwnershipNotInitializedForExtraDataError(raw []byte) (*Ierc721OwnershipNotInitializedForExtraData, error) {
	out := new(Ierc721OwnershipNotInitializedForExtraData)
	if err := ierc721.abi.UnpackIntoInterface(out, "OwnershipNotInitializedForExtraData", raw); err != nil {
		return nil, err
	}
	return out, nil
}

// Ierc721TransferCallerNotOwnerNorApproved represents a TransferCallerNotOwnerNorApproved error raised by the Ierc721 contract.
type Ierc721TransferCallerNotOwnerNorApproved struct {
}

// ErrorID returns the hash of canonical representation of the error's signature.
//
// Solidity: error TransferCallerNotOwnerNorApproved()
func Ierc721TransferCallerNotOwnerNorApprovedErrorID() common.Hash {
	return common.HexToHash("0x59c896bee5f3fe07105589e63f6894f22b4f86fc5ae33f4b35024a15fad3a384")
}

// UnpackTransferCallerNotOwnerNorApprovedError is the Go binding used to decode the provided
// error data into the corresponding Go error struct.
//
// Solidity: error TransferCallerNotOwnerNorApproved()
func (ierc721 *Ierc721) UnpackTransferCallerNotOwnerNorApprovedError(raw []byte) (*Ierc721TransferCallerNotOwnerNorApproved, error) {
	out := new(Ierc721TransferCallerNotOwnerNorApproved)
	if err := ierc721.abi.UnpackIntoInterface(out, "TransferCallerNotOwnerNorApproved", raw); err != nil {
		return nil, err
	}
	return out, nil
}

// Ierc721TransferFromIncorrectOwner represents a TransferFromIncorrectOwner error raised by the Ierc721 contract.
type Ierc721TransferFromIncorrectOwner struct {
}

// ErrorID returns the hash of canonical representation of the error's signature.
//
// Solidity: error TransferFromIncorrectOwner()
func Ierc721TransferFromIncorrectOwnerErrorID() common.Hash {
	return common.HexToHash("0xa1148100b7a051a7c260d3948c4514f272c11602e2f32608ea9ae92eca16e631")
}

// UnpackTransferFromIncorrectOwnerError is the Go binding used to decode the provided
// error data into the corresponding Go error struct.
//
// Solidity: error TransferFromIncorrectOwner()
func (ierc721 *Ierc721) UnpackTransferFromIncorrectOwnerError(raw []byte) (*Ierc721TransferFromIncorrectOwner, error) {
	out := new(Ierc721TransferFromIncorrectOwner)
	if err := ierc721.abi.UnpackIntoInterface(out, "TransferFromIncorrectOwner", raw); err != nil {
		return nil, err
	}
	return out, nil
}

// Ierc721TransferToNonERC721ReceiverImplementer represents a TransferToNonERC721ReceiverImplementer error raised by the Ierc721 contract.
type Ierc721TransferToNonERC721ReceiverImplementer struct {
}

// ErrorID returns the hash of canonical representation of the error's signature.
//
// Solidity: error TransferToNonERC721ReceiverImplementer()
func Ierc721TransferToNonERC721ReceiverImplementerErrorID() common.Hash {
	return common.HexToHash("0xd1a57ed6c24806c9f10c5c8e411074784b421171a7665fc4a05b5e0f95903d49")
}

// UnpackTransferToNonERC721ReceiverImplementerError is the Go binding used to decode the provided
// error data into the corresponding Go error struct.
//
// Solidity: error TransferToNonERC721ReceiverImplementer()
func (ierc721 *Ierc721) UnpackTransferToNonERC721ReceiverImplementerError(raw []byte) (*Ierc721TransferToNonERC721ReceiverImplementer, error) {
	out := new(Ierc721TransferToNonERC721ReceiverImplementer)
	if err := ierc721.abi.UnpackIntoInterface(out, "TransferToNonERC721ReceiverImplementer", raw); err != nil {
		return nil, err
	}
	return out, nil
}

// Ierc721TransferToZeroAddress represents a TransferToZeroAddress error raised by the Ierc721 contract.
type Ierc721TransferToZeroAddress struct {
}

// ErrorID returns the hash of canonical representation of the error's signature.
//
// Solidity: error TransferToZeroAddress()
func Ierc721TransferToZeroAddressErrorID() common.Hash {
	return common.HexToHash("0xea553b3442b8444ed8b0ccbedb10f85cdc3023a296c01cc0fd14e59a1d027a57")
}

// UnpackTransferToZeroAddressError is the Go binding used to decode the provided
// error data into the corresponding Go error struct.
//
// Solidity: error TransferToZeroAddress()
func (ierc721 *Ierc721) UnpackTransferToZeroAddressError(raw []byte) (*Ierc721TransferToZeroAddress, error) {
	out := new(Ierc721TransferToZeroAddress)
	if err := ierc721.abi.UnpackIntoInterface(out, "TransferToZeroAddress", raw); err != nil {
		return nil, err
	}
	return out, nil
}

// Ierc721URIQueryForNonexistentToken represents a URIQueryForNonexistentToken error raised by the Ierc721 contract.
type Ierc721URIQueryForNonexistentToken struct {
}

// ErrorID returns the hash of canonical representation of the error's signature.
//
// Solidity: error URIQueryForNonexistentToken()
func Ierc721URIQueryForNonexistentTokenErrorID() common.Hash {
	return common.HexToHash("0xa14c4b50a5db8b0552ad61499f6df94908ccd800fb11ebb94f1eec13684e67c0")
}

// UnpackURIQueryForNonexistentTokenError is the Go binding used to decode the provided
// error data into the corresponding Go error struct.
//
// Solidity: error URIQueryForNonexistentToken()
func (ierc721 *Ierc721) UnpackURIQueryForNonexistentTokenError(raw []byte) (*Ierc721URIQueryForNonexistentToken, error) {
	out := new(Ierc721URIQueryForNonexistentToken)
	if err := ierc721.abi.UnpackIntoInterface(out, "URIQueryForNonexistentToken", raw); err != nil {
		return nil, err
	}
	return out, nil
}
