// Code generated via abigen V2 - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package inferences

import (
	"bytes"
	"errors"
	"math/big"

	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind/v2"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = bytes.Equal
	_ = errors.New
	_ = big.NewInt
	_ = common.Big1
	_ = types.BloomLookup
	_ = abi.ConvertType
)

// Ierc721MetaData contains all meta data concerning the Ierc721 contract.
var Ierc721MetaData = bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ApprovalCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BalanceQueryForZeroAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"ERC721OutOfBoundsIndex\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintERC2309QuantityExceedsLimit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintZeroQuantity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnerQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnershipNotInitializedForExtraData\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromIncorrectOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToNonERC721ReceiverImplementer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"URIQueryForNonexistentToken\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fromTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toTokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"ConsecutiveTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]",
	ID:  "Ierc721",
	Bin: "0x608060405234801561001057600080fd5b5060405161316b38038061316b83398181016040528101906100329190610b36565b81600690816100419190610dcf565b5080600790816100519190610dcf565b5061006061008b60201b60201c565b60048190555061008461007761009060201b60201c565b601e61009860201b60201c565b505061110c565b600090565b600033905090565b6100b88282604051806020016040528060008152506100bc60201b60201c565b5050565b6100cc838361016660201b60201c565b60008373ffffffffffffffffffffffffffffffffffffffff163b146101615760006004549050600083820390505b610113600086838060010194508661034060201b60201c565b610149576040517fd1a57ed600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8181106100fa57816004541461015e57600080fd5b50505b505050565b60006004549050600082036101a7576040517fb562e8dd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6101ba600084838561049660201b60201c565b600160406001901b178202600960008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254019250508190555061024383610228600086600061049c60201b60201c565b610237856104ca60201b60201c565b176104da60201b60201c565b6008600083815260200190815260200160002081905550600080838301905073ffffffffffffffffffffffffffffffffffffffff85169150828260007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef600080a4600183015b8181146102e457808360007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef600080a46001810190506102a9565b506000820361031f576040517f2e07630000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600481905550505061033b600084838561050560201b60201c565b505050565b60008373ffffffffffffffffffffffffffffffffffffffff1663150b7a0261036c61009060201b60201c565b8786866040518563ffffffff1660e01b815260040161038e9493929190610f46565b6020604051808303816000875af19250505080156103ca57506040513d601f19601f820116820180604052508101906103c79190610fea565b60015b610443573d80600081146103fa576040519150601f19603f3d011682016040523d82523d6000602084013e6103ff565b606091505b50600081510361043b576040517fd1a57ed600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050949350505050565b50505050565b60008060e883901c905060e86104b986868461054160201b60201c565b62ffffff16901b9150509392505050565b60006001821460e11b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff83169250814260a01b178317905092915050565b60005b8181101561053a5761052c858583866105219190611046565b61054a60201b60201c565b508080600101915050610508565b5050505050565b60009392505050565b60008073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16036105935761058e8261066f60201b60201c565b6105d8565b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16146105d7576105d684836106b860201b60201c565b5b5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036106205761061b826107a860201b60201c565b610665565b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161461066457610663838361087960201b60201c565b5b5b8390509392505050565b6002805490506003600083815260200190815260200160002081905550600281908060018154018082558091505060019003906000526020600020016000909190919091505550565b60006106c98361090960201b60201c565b905060006001600084815260200190815260200160002054905060008060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508282146107745760008160008581526020019081526020016000205490508082600085815260200190815260200160002081905550826001600083815260200190815260200160002081905550505b6001600085815260200190815260200160002060009055806000848152602001908152602001600020600090555050505050565b600060016002805490506107bc919061107a565b90506000600360008481526020019081526020016000205490506000600283815481106107ec576107eb6110ae565b5b90600052602060002001549050806002838154811061080e5761080d6110ae565b5b90600052602060002001819055508160036000838152602001908152602001600020819055506003600085815260200190815260200160002060009055600280548061085d5761085c6110dd565b5b6001900381819060005260206000200160009055905550505050565b6000600161088c8461090960201b60201c565b610896919061107a565b9050816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002081905550806001600084815260200190815260200160002081905550505050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610970576040517f8f4eb60400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b67ffffffffffffffff600960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054169050919050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610a28826109df565b810181811067ffffffffffffffff82111715610a4757610a466109f0565b5b80604052505050565b6000610a5a6109c1565b9050610a668282610a1f565b919050565b600067ffffffffffffffff821115610a8657610a856109f0565b5b610a8f826109df565b9050602081019050919050565b60005b83811015610aba578082015181840152602081019050610a9f565b60008484015250505050565b6000610ad9610ad484610a6b565b610a50565b905082815260208101848484011115610af557610af46109da565b5b610b00848285610a9c565b509392505050565b600082601f830112610b1d57610b1c6109d5565b5b8151610b2d848260208601610ac6565b91505092915050565b60008060408385031215610b4d57610b4c6109cb565b5b600083015167ffffffffffffffff811115610b6b57610b6a6109d0565b5b610b7785828601610b08565b925050602083015167ffffffffffffffff811115610b9857610b976109d0565b5b610ba485828601610b08565b9150509250929050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610c0057607f821691505b602082108103610c1357610c12610bb9565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302610c7b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82610c3e565b610c858683610c3e565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000610ccc610cc7610cc284610c9d565b610ca7565b610c9d565b9050919050565b6000819050919050565b610ce683610cb1565b610cfa610cf282610cd3565b848454610c4b565b825550505050565b600090565b610d0f610d02565b610d1a818484610cdd565b505050565b5b81811015610d3e57610d33600082610d07565b600181019050610d20565b5050565b601f821115610d8357610d5481610c19565b610d5d84610c2e565b81016020851015610d6c578190505b610d80610d7885610c2e565b830182610d1f565b50505b505050565b600082821c905092915050565b6000610da660001984600802610d88565b1980831691505092915050565b6000610dbf8383610d95565b9150826002028217905092915050565b610dd882610bae565b67ffffffffffffffff811115610df157610df06109f0565b5b610dfb8254610be8565b610e06828285610d42565b600060209050601f831160018114610e395760008415610e27578287015190505b610e318582610db3565b865550610e99565b601f198416610e4786610c19565b60005b82811015610e6f57848901518255600182019150602085019450602081019050610e4a565b86831015610e8c5784890151610e88601f891682610d95565b8355505b6001600288020188555050505b505050505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610ecc82610ea1565b9050919050565b610edc81610ec1565b82525050565b610eeb81610c9d565b82525050565b600081519050919050565b600082825260208201905092915050565b6000610f1882610ef1565b610f228185610efc565b9350610f32818560208601610a9c565b610f3b816109df565b840191505092915050565b6000608082019050610f5b6000830187610ed3565b610f686020830186610ed3565b610f756040830185610ee2565b8181036060830152610f878184610f0d565b905095945050505050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b610fc781610f92565b8114610fd257600080fd5b50565b600081519050610fe481610fbe565b92915050565b60006020828403121561100057610fff6109cb565b5b600061100e84828501610fd5565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061105182610c9d565b915061105c83610c9d565b925082820190508082111561107457611073611017565b5b92915050565b600061108582610c9d565b915061109083610c9d565b92508282039050818111156110a8576110a7611017565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b6120508061111b6000396000f3fe6080604052600436106100fe5760003560e01c806342842e0e1161009557806395d89b411161006457806395d89b4114610359578063a22cb46514610384578063b88d4fde146103ad578063c87b56dd146103c9578063e985e9c514610406576100fe565b806342842e0e146102865780634f6ccce7146102a25780636352211e146102df57806370a082311461031c576100fe565b806318160ddd116100d157806318160ddd146101c457806323b872dd146101ef5780632a55205a1461020b5780632f745c5914610249576100fe565b806301ffc9a71461010357806306fdde0314610140578063081812fc1461016b578063095ea7b3146101a8575b600080fd5b34801561010f57600080fd5b5061012a60048036038101906101259190611774565b610443565b60405161013791906117bc565b60405180910390f35b34801561014c57600080fd5b506101556104d5565b6040516101629190611867565b60405180910390f35b34801561017757600080fd5b50610192600480360381019061018d91906118bf565b610567565b60405161019f919061192d565b60405180910390f35b6101c260048036038101906101bd9190611974565b6105e6565b005b3480156101d057600080fd5b506101d961072a565b6040516101e691906119c3565b60405180910390f35b610209600480360381019061020491906119de565b610741565b005b34801561021757600080fd5b50610232600480360381019061022d9190611a31565b6109fd565b604051610240929190611a71565b60405180910390f35b34801561025557600080fd5b50610270600480360381019061026b9190611974565b610a31565b60405161027d91906119c3565b60405180910390f35b6102a0600480360381019061029b91906119de565b610ad9565b005b3480156102ae57600080fd5b506102c960048036038101906102c491906118bf565b610af9565b6040516102d691906119c3565b60405180910390f35b3480156102eb57600080fd5b50610306600480360381019061030191906118bf565b610b6f565b604051610313919061192d565b60405180910390f35b34801561032857600080fd5b50610343600480360381019061033e9190611a9a565b610b81565b60405161035091906119c3565b60405180910390f35b34801561036557600080fd5b5061036e610c39565b60405161037b9190611867565b60405180910390f35b34801561039057600080fd5b506103ab60048036038101906103a69190611af3565b610ccb565b005b6103c760048036038101906103c29190611c68565b610dd6565b005b3480156103d557600080fd5b506103f060048036038101906103eb91906118bf565b610e49565b6040516103fd9190611867565b60405180910390f35b34801561041257600080fd5b5061042d60048036038101906104289190611ceb565b610ee7565b60405161043a91906117bc565b60405180910390f35b60006301ffc9a760e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061049e57506380ac58cd60e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806104ce5750635b5e139f60e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b9050919050565b6060600680546104e490611d5a565b80601f016020809104026020016040519081016040528092919081815260200182805461051090611d5a565b801561055d5780601f106105325761010080835404028352916020019161055d565b820191906000526020600020905b81548152906001019060200180831161054057829003601f168201915b5050505050905090565b600061057282610f7b565b6105a8576040517fcf4700e400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600a600083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006105f182610b6f565b90508073ffffffffffffffffffffffffffffffffffffffff16610612610fda565b73ffffffffffffffffffffffffffffffffffffffff16146106755761063e81610639610fda565b610ee7565b610674576040517fcfb3b94200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5b82600a600084815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550818373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a4505050565b6000610734610fe2565b6005546004540303905090565b600061074c82610fe7565b90508373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146107b3576040517fa114810000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000806107bf846110b3565b915091506107d581876107d0610fda565b6110da565b610821576107ea866107e5610fda565b610ee7565b610820576040517f59c896be00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5b61082e868686600161111e565b801561083957600082555b600960008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600081546001900391905081905550600960008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000815460010191905081905550610907856108e3888887611124565b7c02000000000000000000000000000000000000000000000000000000001761114c565b600860008681526020019081526020016000208190555060007c020000000000000000000000000000000000000000000000000000000084160361098d576000600185019050600060086000838152602001908152602001600020540361098b57600454811461098a578360086000838152602001908152602001600020819055505b5b505b838573ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46109f58686866001611177565b505050505050565b600080610a11610a0b610fda565b30610ee7565b15610a225760008091509150610a2a565b600080915091505b9250929050565b6000610a3c83610b81565b8210610a815782826040517fa57d13dc000000000000000000000000000000000000000000000000000000008152600401610a78929190611a71565b60405180910390fd5b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002054905092915050565b610af483838360405180602001604052806000815250610dd6565b505050565b6000610b0361072a565b8210610b49576000826040517fa57d13dc000000000000000000000000000000000000000000000000000000008152600401610b40929190611a71565b60405180910390fd5b60028281548110610b5d57610b5c611d8b565b5b90600052602060002001549050919050565b6000610b7a82610fe7565b9050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610be8576040517f8f4eb60400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b67ffffffffffffffff600960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054169050919050565b606060078054610c4890611d5a565b80601f0160208091040260200160405190810160405280929190818152602001828054610c7490611d5a565b8015610cc15780601f10610c9657610100808354040283529160200191610cc1565b820191906000526020600020905b815481529060010190602001808311610ca457829003601f168201915b5050505050905090565b80600b6000610cd8610fda565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff16610d85610fda565b73ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051610dca91906117bc565b60405180910390a35050565b610de1848484610741565b60008373ffffffffffffffffffffffffffffffffffffffff163b14610e4357610e0c848484846111ad565b610e42576040517fd1a57ed600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5b50505050565b6060610e5482610f7b565b610e8a576040517fa14c4b5000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610e946112fd565b90506000815103610eb45760405180602001604052806000815250610edf565b80610ebe84611314565b604051602001610ecf929190611e42565b6040516020818303038152906040525b915050919050565b6000600b60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600081610f86610fe2565b11158015610f95575060045482105b8015610fd3575060007c0100000000000000000000000000000000000000000000000000000000600860008581526020019081526020016000205416145b9050919050565b600033905090565b600090565b60008082905080610ff6610fe2565b1161107c5760045481101561107b5760006008600083815260200190815260200160002054905060007c0100000000000000000000000000000000000000000000000000000000821603611079575b6000810361106f576008600083600190039350838152602001908152602001600020549050611045565b80925050506110ae565b505b5b6040517fdf2d9b4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b919050565b6000806000600a600085815260200190815260200160002090508092508254915050915091565b600073ffffffffffffffffffffffffffffffffffffffff8316925073ffffffffffffffffffffffffffffffffffffffff821691508382148383141790509392505050565b50505050565b60008060e883901c905060e861113b868684611364565b62ffffff16901b9150509392505050565b600073ffffffffffffffffffffffffffffffffffffffff83169250814260a01b178317905092915050565b60005b818110156111a657611198858583866111939190611ea0565b61136d565b50808060010191505061117a565b5050505050565b60008373ffffffffffffffffffffffffffffffffffffffff1663150b7a026111d3610fda565b8786866040518563ffffffff1660e01b81526004016111f59493929190611f29565b6020604051808303816000875af192505050801561123157506040513d601f19601f8201168201806040525081019061122e9190611f8a565b60015b6112aa573d8060008114611261576040519150601f19603f3d011682016040523d82523d6000602084013e611266565b606091505b5060008151036112a2576040517fd1a57ed600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050949350505050565b606060405180602001604052806000815250905090565b606060a060405101806040526020810391506000825281835b60011561134f57600184039350600a81066030018453600a810490508061132d575b50828103602084039350808452505050919050565b60009392505050565b60008073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16036113b0576113ab8261147a565b6113ef565b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16146113ee576113ed84836114c3565b5b5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036114315761142c826115ad565b611470565b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161461146f5761146e838361167e565b5b5b8390509392505050565b6002805490506003600083815260200190815260200160002081905550600281908060018154018082558091505060019003906000526020600020016000909190919091505550565b60006114ce83610b81565b905060006001600084815260200190815260200160002054905060008060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508282146115795760008160008581526020019081526020016000205490508082600085815260200190815260200160002081905550826001600083815260200190815260200160002081905550505b6001600085815260200190815260200160002060009055806000848152602001908152602001600020600090555050505050565b600060016002805490506115c19190611fb7565b90506000600360008481526020019081526020016000205490506000600283815481106115f1576115f0611d8b565b5b90600052602060002001549050806002838154811061161357611612611d8b565b5b90600052602060002001819055508160036000838152602001908152602001600020819055506003600085815260200190815260200160002060009055600280548061166257611661611feb565b5b6001900381819060005260206000200160009055905550505050565b6000600161168b84610b81565b6116959190611fb7565b9050816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002081905550806001600084815260200190815260200160002081905550505050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6117518161171c565b811461175c57600080fd5b50565b60008135905061176e81611748565b92915050565b60006020828403121561178a57611789611712565b5b60006117988482850161175f565b91505092915050565b60008115159050919050565b6117b6816117a1565b82525050565b60006020820190506117d160008301846117ad565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156118115780820151818401526020810190506117f6565b60008484015250505050565b6000601f19601f8301169050919050565b6000611839826117d7565b61184381856117e2565b93506118538185602086016117f3565b61185c8161181d565b840191505092915050565b60006020820190508181036000830152611881818461182e565b905092915050565b6000819050919050565b61189c81611889565b81146118a757600080fd5b50565b6000813590506118b981611893565b92915050565b6000602082840312156118d5576118d4611712565b5b60006118e3848285016118aa565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611917826118ec565b9050919050565b6119278161190c565b82525050565b6000602082019050611942600083018461191e565b92915050565b6119518161190c565b811461195c57600080fd5b50565b60008135905061196e81611948565b92915050565b6000806040838503121561198b5761198a611712565b5b60006119998582860161195f565b92505060206119aa858286016118aa565b9150509250929050565b6119bd81611889565b82525050565b60006020820190506119d860008301846119b4565b92915050565b6000806000606084860312156119f7576119f6611712565b5b6000611a058682870161195f565b9350506020611a168682870161195f565b9250506040611a27868287016118aa565b9150509250925092565b60008060408385031215611a4857611a47611712565b5b6000611a56858286016118aa565b9250506020611a67858286016118aa565b9150509250929050565b6000604082019050611a86600083018561191e565b611a9360208301846119b4565b9392505050565b600060208284031215611ab057611aaf611712565b5b6000611abe8482850161195f565b91505092915050565b611ad0816117a1565b8114611adb57600080fd5b50565b600081359050611aed81611ac7565b92915050565b60008060408385031215611b0a57611b09611712565b5b6000611b188582860161195f565b9250506020611b2985828601611ade565b9150509250929050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611b758261181d565b810181811067ffffffffffffffff82111715611b9457611b93611b3d565b5b80604052505050565b6000611ba7611708565b9050611bb38282611b6c565b919050565b600067ffffffffffffffff821115611bd357611bd2611b3d565b5b611bdc8261181d565b9050602081019050919050565b82818337600083830152505050565b6000611c0b611c0684611bb8565b611b9d565b905082815260208101848484011115611c2757611c26611b38565b5b611c32848285611be9565b509392505050565b600082601f830112611c4f57611c4e611b33565b5b8135611c5f848260208601611bf8565b91505092915050565b60008060008060808587031215611c8257611c81611712565b5b6000611c908782880161195f565b9450506020611ca18782880161195f565b9350506040611cb2878288016118aa565b925050606085013567ffffffffffffffff811115611cd357611cd2611717565b5b611cdf87828801611c3a565b91505092959194509250565b60008060408385031215611d0257611d01611712565b5b6000611d108582860161195f565b9250506020611d218582860161195f565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680611d7257607f821691505b602082108103611d8557611d84611d2b565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600081905092915050565b6000611dd0826117d7565b611dda8185611dba565b9350611dea8185602086016117f3565b80840191505092915050565b7f2e6a736f6e000000000000000000000000000000000000000000000000000000600082015250565b6000611e2c600583611dba565b9150611e3782611df6565b600582019050919050565b6000611e4e8285611dc5565b9150611e5a8284611dc5565b9150611e6582611e1f565b91508190509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611eab82611889565b9150611eb683611889565b9250828201905080821115611ece57611ecd611e71565b5b92915050565b600081519050919050565b600082825260208201905092915050565b6000611efb82611ed4565b611f058185611edf565b9350611f158185602086016117f3565b611f1e8161181d565b840191505092915050565b6000608082019050611f3e600083018761191e565b611f4b602083018661191e565b611f5860408301856119b4565b8181036060830152611f6a8184611ef0565b905095945050505050565b600081519050611f8481611748565b92915050565b600060208284031215611fa057611f9f611712565b5b6000611fae84828501611f75565b91505092915050565b6000611fc282611889565b9150611fcd83611889565b9250828203905081811115611fe557611fe4611e71565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea2646970667358221220897d1c8629f3a3b6846fd71e24a4afa97fedb471b58a42288d9c2419198f0b2664736f6c634300081c0033",
}

// Ierc721 is an auto generated Go binding around an Ethereum contract.
type Ierc721 struct {
	abi abi.ABI
}

// NewIerc721 creates a new instance of Ierc721.
func NewIerc721() *Ierc721 {
	parsed, err := Ierc721MetaData.ParseABI()
	if err != nil {
		panic(errors.New("invalid ABI: " + err.Error()))
	}
	return &Ierc721{abi: *parsed}
}

// Instance creates a wrapper for a deployed contract instance at the given address.
// Use this to create the instance object passed to abigen v2 library functions Call, Transact, etc.
func (c *Ierc721) Instance(backend bind.ContractBackend, addr common.Address) *bind.BoundContract {
	return bind.NewBoundContract(addr, c.abi, backend, backend, backend)
}

// PackConstructor is the Go binding used to pack the parameters required for
// contract deployment.
//
// Solidity: constructor(string name_, string symbol_) returns()
func (ierc721 *Ierc721) PackConstructor(name_ string, symbol_ string) []byte {
	enc, err := ierc721.abi.Pack("", name_, symbol_)
	if err != nil {
		panic(err)
	}
	return enc
}

// PackApprove is the Go binding used to pack the parameters required for calling
// the contract method with ID 0x095ea7b3.  This method will panic if any
// invalid/nil inputs are passed.
//
// Solidity: function approve(address to, uint256 tokenId) payable returns()
func (ierc721 *Ierc721) PackApprove(to common.Address, tokenId *big.Int) []byte {
	enc, err := ierc721.abi.Pack("approve", to, tokenId)
	if err != nil {
		panic(err)
	}
	return enc
}

// TryPackApprove is the Go binding used to pack the parameters required for calling
// the contract method with ID 0x095ea7b3.  This method will return an error
// if any inputs are invalid/nil.
//
// Solidity: function approve(address to, uint256 tokenId) payable returns()
func (ierc721 *Ierc721) TryPackApprove(to common.Address, tokenId *big.Int) ([]byte, error) {
	return ierc721.abi.Pack("approve", to, tokenId)
}

// PackBalanceOf is the Go binding used to pack the parameters required for calling
// the contract method with ID 0x70a08231.  This method will panic if any
// invalid/nil inputs are passed.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (ierc721 *Ierc721) PackBalanceOf(owner common.Address) []byte {
	enc, err := ierc721.abi.Pack("balanceOf", owner)
	if err != nil {
		panic(err)
	}
	return enc
}

// TryPackBalanceOf is the Go binding used to pack the parameters required for calling
// the contract method with ID 0x70a08231.  This method will return an error
// if any inputs are invalid/nil.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (ierc721 *Ierc721) TryPackBalanceOf(owner common.Address) ([]byte, error) {
	return ierc721.abi.Pack("balanceOf", owner)
}

// UnpackBalanceOf is the Go binding that unpacks the parameters returned
// from invoking the contract method with ID 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (ierc721 *Ierc721) UnpackBalanceOf(data []byte) (*big.Int, error) {
	out, err := ierc721.abi.Unpack("balanceOf", data)
	if err != nil {
		return new(big.Int), err
	}
	out0 := abi.ConvertType(out[0], new(big.Int)).(*big.Int)
	return out0, nil
}

// PackGetApproved is the Go binding used to pack the parameters required for calling
// the contract method with ID 0x081812fc.  This method will panic if any
// invalid/nil inputs are passed.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (ierc721 *Ierc721) PackGetApproved(tokenId *big.Int) []byte {
	enc, err := ierc721.abi.Pack("getApproved", tokenId)
	if err != nil {
		panic(err)
	}
	return enc
}

// TryPackGetApproved is the Go binding used to pack the parameters required for calling
// the contract method with ID 0x081812fc.  This method will return an error
// if any inputs are invalid/nil.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (ierc721 *Ierc721) TryPackGetApproved(tokenId *big.Int) ([]byte, error) {
	return ierc721.abi.Pack("getApproved", tokenId)
}

// UnpackGetApproved is the Go binding that unpacks the parameters returned
// from invoking the contract method with ID 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (ierc721 *Ierc721) UnpackGetApproved(data []byte) (common.Address, error) {
	out, err := ierc721.abi.Unpack("getApproved", data)
	if err != nil {
		return *new(common.Address), err
	}
	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	return out0, nil
}

// PackIsApprovedForAll is the Go binding used to pack the parameters required for calling
// the contract method with ID 0xe985e9c5.  This method will panic if any
// invalid/nil inputs are passed.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (ierc721 *Ierc721) PackIsApprovedForAll(owner common.Address, operator common.Address) []byte {
	enc, err := ierc721.abi.Pack("isApprovedForAll", owner, operator)
	if err != nil {
		panic(err)
	}
	return enc
}

// TryPackIsApprovedForAll is the Go binding used to pack the parameters required for calling
// the contract method with ID 0xe985e9c5.  This method will return an error
// if any inputs are invalid/nil.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (ierc721 *Ierc721) TryPackIsApprovedForAll(owner common.Address, operator common.Address) ([]byte, error) {
	return ierc721.abi.Pack("isApprovedForAll", owner, operator)
}

// UnpackIsApprovedForAll is the Go binding that unpacks the parameters returned
// from invoking the contract method with ID 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (ierc721 *Ierc721) UnpackIsApprovedForAll(data []byte) (bool, error) {
	out, err := ierc721.abi.Unpack("isApprovedForAll", data)
	if err != nil {
		return *new(bool), err
	}
	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)
	return out0, nil
}

// PackName is the Go binding used to pack the parameters required for calling
// the contract method with ID 0x06fdde03.  This method will panic if any
// invalid/nil inputs are passed.
//
// Solidity: function name() view returns(string)
func (ierc721 *Ierc721) PackName() []byte {
	enc, err := ierc721.abi.Pack("name")
	if err != nil {
		panic(err)
	}
	return enc
}

// TryPackName is the Go binding used to pack the parameters required for calling
// the contract method with ID 0x06fdde03.  This method will return an error
// if any inputs are invalid/nil.
//
// Solidity: function name() view returns(string)
func (ierc721 *Ierc721) TryPackName() ([]byte, error) {
	return ierc721.abi.Pack("name")
}

// UnpackName is the Go binding that unpacks the parameters returned
// from invoking the contract method with ID 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (ierc721 *Ierc721) UnpackName(data []byte) (string, error) {
	out, err := ierc721.abi.Unpack("name", data)
	if err != nil {
		return *new(string), err
	}
	out0 := *abi.ConvertType(out[0], new(string)).(*string)
	return out0, nil
}

// PackOwnerOf is the Go binding used to pack the parameters required for calling
// the contract method with ID 0x6352211e.  This method will panic if any
// invalid/nil inputs are passed.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (ierc721 *Ierc721) PackOwnerOf(tokenId *big.Int) []byte {
	enc, err := ierc721.abi.Pack("ownerOf", tokenId)
	if err != nil {
		panic(err)
	}
	return enc
}

// TryPackOwnerOf is the Go binding used to pack the parameters required for calling
// the contract method with ID 0x6352211e.  This method will return an error
// if any inputs are invalid/nil.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (ierc721 *Ierc721) TryPackOwnerOf(tokenId *big.Int) ([]byte, error) {
	return ierc721.abi.Pack("ownerOf", tokenId)
}

// UnpackOwnerOf is the Go binding that unpacks the parameters returned
// from invoking the contract method with ID 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (ierc721 *Ierc721) UnpackOwnerOf(data []byte) (common.Address, error) {
	out, err := ierc721.abi.Unpack("ownerOf", data)
	if err != nil {
		return *new(common.Address), err
	}
	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	return out0, nil
}

// PackRoyaltyInfo is the Go binding used to pack the parameters required for calling
// the contract method with ID 0x2a55205a.  This method will panic if any
// invalid/nil inputs are passed.
//
// Solidity: function royaltyInfo(uint256 , uint256 ) view returns(address receiver, uint256 royaltyAmount)
func (ierc721 *Ierc721) PackRoyaltyInfo(arg0 *big.Int, arg1 *big.Int) []byte {
	enc, err := ierc721.abi.Pack("royaltyInfo", arg0, arg1)
	if err != nil {
		panic(err)
	}
	return enc
}

// TryPackRoyaltyInfo is the Go binding used to pack the parameters required for calling
// the contract method with ID 0x2a55205a.  This method will return an error
// if any inputs are invalid/nil.
//
// Solidity: function royaltyInfo(uint256 , uint256 ) view returns(address receiver, uint256 royaltyAmount)
func (ierc721 *Ierc721) TryPackRoyaltyInfo(arg0 *big.Int, arg1 *big.Int) ([]byte, error) {
	return ierc721.abi.Pack("royaltyInfo", arg0, arg1)
}

// RoyaltyInfoOutput serves as a container for the return parameters of contract
// method RoyaltyInfo.
type RoyaltyInfoOutput struct {
	Receiver      common.Address
	RoyaltyAmount *big.Int
}

// UnpackRoyaltyInfo is the Go binding that unpacks the parameters returned
// from invoking the contract method with ID 0x2a55205a.
//
// Solidity: function royaltyInfo(uint256 , uint256 ) view returns(address receiver, uint256 royaltyAmount)
func (ierc721 *Ierc721) UnpackRoyaltyInfo(data []byte) (RoyaltyInfoOutput, error) {
	out, err := ierc721.abi.Unpack("royaltyInfo", data)
	outstruct := new(RoyaltyInfoOutput)
	if err != nil {
		return *outstruct, err
	}
	outstruct.Receiver = *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	outstruct.RoyaltyAmount = abi.ConvertType(out[1], new(big.Int)).(*big.Int)
	return *outstruct, nil
}

// PackSafeTransferFrom is the Go binding used to pack the parameters required for calling
// the contract method with ID 0x42842e0e.  This method will panic if any
// invalid/nil inputs are passed.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) payable returns()
func (ierc721 *Ierc721) PackSafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) []byte {
	enc, err := ierc721.abi.Pack("safeTransferFrom", from, to, tokenId)
	if err != nil {
		panic(err)
	}
	return enc
}

// TryPackSafeTransferFrom is the Go binding used to pack the parameters required for calling
// the contract method with ID 0x42842e0e.  This method will return an error
// if any inputs are invalid/nil.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) payable returns()
func (ierc721 *Ierc721) TryPackSafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) ([]byte, error) {
	return ierc721.abi.Pack("safeTransferFrom", from, to, tokenId)
}

// PackSafeTransferFrom0 is the Go binding used to pack the parameters required for calling
// the contract method with ID 0xb88d4fde.  This method will panic if any
// invalid/nil inputs are passed.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) payable returns()
func (ierc721 *Ierc721) PackSafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, data []byte) []byte {
	enc, err := ierc721.abi.Pack("safeTransferFrom0", from, to, tokenId, data)
	if err != nil {
		panic(err)
	}
	return enc
}

// TryPackSafeTransferFrom0 is the Go binding used to pack the parameters required for calling
// the contract method with ID 0xb88d4fde.  This method will return an error
// if any inputs are invalid/nil.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) payable returns()
func (ierc721 *Ierc721) TryPackSafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, data []byte) ([]byte, error) {
	return ierc721.abi.Pack("safeTransferFrom0", from, to, tokenId, data)
}

// PackSetApprovalForAll is the Go binding used to pack the parameters required for calling
// the contract method with ID 0xa22cb465.  This method will panic if any
// invalid/nil inputs are passed.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (ierc721 *Ierc721) PackSetApprovalForAll(operator common.Address, approved bool) []byte {
	enc, err := ierc721.abi.Pack("setApprovalForAll", operator, approved)
	if err != nil {
		panic(err)
	}
	return enc
}

// TryPackSetApprovalForAll is the Go binding used to pack the parameters required for calling
// the contract method with ID 0xa22cb465.  This method will return an error
// if any inputs are invalid/nil.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (ierc721 *Ierc721) TryPackSetApprovalForAll(operator common.Address, approved bool) ([]byte, error) {
	return ierc721.abi.Pack("setApprovalForAll", operator, approved)
}

// PackSupportsInterface is the Go binding used to pack the parameters required for calling
// the contract method with ID 0x01ffc9a7.  This method will panic if any
// invalid/nil inputs are passed.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (ierc721 *Ierc721) PackSupportsInterface(interfaceId [4]byte) []byte {
	enc, err := ierc721.abi.Pack("supportsInterface", interfaceId)
	if err != nil {
		panic(err)
	}
	return enc
}

// TryPackSupportsInterface is the Go binding used to pack the parameters required for calling
// the contract method with ID 0x01ffc9a7.  This method will return an error
// if any inputs are invalid/nil.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (ierc721 *Ierc721) TryPackSupportsInterface(interfaceId [4]byte) ([]byte, error) {
	return ierc721.abi.Pack("supportsInterface", interfaceId)
}

// UnpackSupportsInterface is the Go binding that unpacks the parameters returned
// from invoking the contract method with ID 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (ierc721 *Ierc721) UnpackSupportsInterface(data []byte) (bool, error) {
	out, err := ierc721.abi.Unpack("supportsInterface", data)
	if err != nil {
		return *new(bool), err
	}
	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)
	return out0, nil
}

// PackSymbol is the Go binding used to pack the parameters required for calling
// the contract method with ID 0x95d89b41.  This method will panic if any
// invalid/nil inputs are passed.
//
// Solidity: function symbol() view returns(string)
func (ierc721 *Ierc721) PackSymbol() []byte {
	enc, err := ierc721.abi.Pack("symbol")
	if err != nil {
		panic(err)
	}
	return enc
}

// TryPackSymbol is the Go binding used to pack the parameters required for calling
// the contract method with ID 0x95d89b41.  This method will return an error
// if any inputs are invalid/nil.
//
// Solidity: function symbol() view returns(string)
func (ierc721 *Ierc721) TryPackSymbol() ([]byte, error) {
	return ierc721.abi.Pack("symbol")
}

// UnpackSymbol is the Go binding that unpacks the parameters returned
// from invoking the contract method with ID 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (ierc721 *Ierc721) UnpackSymbol(data []byte) (string, error) {
	out, err := ierc721.abi.Unpack("symbol", data)
	if err != nil {
		return *new(string), err
	}
	out0 := *abi.ConvertType(out[0], new(string)).(*string)
	return out0, nil
}

// PackTokenByIndex is the Go binding used to pack the parameters required for calling
// the contract method with ID 0x4f6ccce7.  This method will panic if any
// invalid/nil inputs are passed.
//
// Solidity: function tokenByIndex(uint256 index) view returns(uint256)
func (ierc721 *Ierc721) PackTokenByIndex(index *big.Int) []byte {
	enc, err := ierc721.abi.Pack("tokenByIndex", index)
	if err != nil {
		panic(err)
	}
	return enc
}

// TryPackTokenByIndex is the Go binding used to pack the parameters required for calling
// the contract method with ID 0x4f6ccce7.  This method will return an error
// if any inputs are invalid/nil.
//
// Solidity: function tokenByIndex(uint256 index) view returns(uint256)
func (ierc721 *Ierc721) TryPackTokenByIndex(index *big.Int) ([]byte, error) {
	return ierc721.abi.Pack("tokenByIndex", index)
}

// UnpackTokenByIndex is the Go binding that unpacks the parameters returned
// from invoking the contract method with ID 0x4f6ccce7.
//
// Solidity: function tokenByIndex(uint256 index) view returns(uint256)
func (ierc721 *Ierc721) UnpackTokenByIndex(data []byte) (*big.Int, error) {
	out, err := ierc721.abi.Unpack("tokenByIndex", data)
	if err != nil {
		return new(big.Int), err
	}
	out0 := abi.ConvertType(out[0], new(big.Int)).(*big.Int)
	return out0, nil
}

// PackTokenOfOwnerByIndex is the Go binding used to pack the parameters required for calling
// the contract method with ID 0x2f745c59.  This method will panic if any
// invalid/nil inputs are passed.
//
// Solidity: function tokenOfOwnerByIndex(address owner, uint256 index) view returns(uint256)
func (ierc721 *Ierc721) PackTokenOfOwnerByIndex(owner common.Address, index *big.Int) []byte {
	enc, err := ierc721.abi.Pack("tokenOfOwnerByIndex", owner, index)
	if err != nil {
		panic(err)
	}
	return enc
}

// TryPackTokenOfOwnerByIndex is the Go binding used to pack the parameters required for calling
// the contract method with ID 0x2f745c59.  This method will return an error
// if any inputs are invalid/nil.
//
// Solidity: function tokenOfOwnerByIndex(address owner, uint256 index) view returns(uint256)
func (ierc721 *Ierc721) TryPackTokenOfOwnerByIndex(owner common.Address, index *big.Int) ([]byte, error) {
	return ierc721.abi.Pack("tokenOfOwnerByIndex", owner, index)
}

// UnpackTokenOfOwnerByIndex is the Go binding that unpacks the parameters returned
// from invoking the contract method with ID 0x2f745c59.
//
// Solidity: function tokenOfOwnerByIndex(address owner, uint256 index) view returns(uint256)
func (ierc721 *Ierc721) UnpackTokenOfOwnerByIndex(data []byte) (*big.Int, error) {
	out, err := ierc721.abi.Unpack("tokenOfOwnerByIndex", data)
	if err != nil {
		return new(big.Int), err
	}
	out0 := abi.ConvertType(out[0], new(big.Int)).(*big.Int)
	return out0, nil
}

// PackTokenURI is the Go binding used to pack the parameters required for calling
// the contract method with ID 0xc87b56dd.  This method will panic if any
// invalid/nil inputs are passed.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (ierc721 *Ierc721) PackTokenURI(tokenId *big.Int) []byte {
	enc, err := ierc721.abi.Pack("tokenURI", tokenId)
	if err != nil {
		panic(err)
	}
	return enc
}

// TryPackTokenURI is the Go binding used to pack the parameters required for calling
// the contract method with ID 0xc87b56dd.  This method will return an error
// if any inputs are invalid/nil.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (ierc721 *Ierc721) TryPackTokenURI(tokenId *big.Int) ([]byte, error) {
	return ierc721.abi.Pack("tokenURI", tokenId)
}

// UnpackTokenURI is the Go binding that unpacks the parameters returned
// from invoking the contract method with ID 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (ierc721 *Ierc721) UnpackTokenURI(data []byte) (string, error) {
	out, err := ierc721.abi.Unpack("tokenURI", data)
	if err != nil {
		return *new(string), err
	}
	out0 := *abi.ConvertType(out[0], new(string)).(*string)
	return out0, nil
}

// PackTotalSupply is the Go binding used to pack the parameters required for calling
// the contract method with ID 0x18160ddd.  This method will panic if any
// invalid/nil inputs are passed.
//
// Solidity: function totalSupply() view returns(uint256)
func (ierc721 *Ierc721) PackTotalSupply() []byte {
	enc, err := ierc721.abi.Pack("totalSupply")
	if err != nil {
		panic(err)
	}
	return enc
}

// TryPackTotalSupply is the Go binding used to pack the parameters required for calling
// the contract method with ID 0x18160ddd.  This method will return an error
// if any inputs are invalid/nil.
//
// Solidity: function totalSupply() view returns(uint256)
func (ierc721 *Ierc721) TryPackTotalSupply() ([]byte, error) {
	return ierc721.abi.Pack("totalSupply")
}

// UnpackTotalSupply is the Go binding that unpacks the parameters returned
// from invoking the contract method with ID 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (ierc721 *Ierc721) UnpackTotalSupply(data []byte) (*big.Int, error) {
	out, err := ierc721.abi.Unpack("totalSupply", data)
	if err != nil {
		return new(big.Int), err
	}
	out0 := abi.ConvertType(out[0], new(big.Int)).(*big.Int)
	return out0, nil
}

// PackTransferFrom is the Go binding used to pack the parameters required for calling
// the contract method with ID 0x23b872dd.  This method will panic if any
// invalid/nil inputs are passed.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) payable returns()
func (ierc721 *Ierc721) PackTransferFrom(from common.Address, to common.Address, tokenId *big.Int) []byte {
	enc, err := ierc721.abi.Pack("transferFrom", from, to, tokenId)
	if err != nil {
		panic(err)
	}
	return enc
}

// TryPackTransferFrom is the Go binding used to pack the parameters required for calling
// the contract method with ID 0x23b872dd.  This method will return an error
// if any inputs are invalid/nil.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) payable returns()
func (ierc721 *Ierc721) TryPackTransferFrom(from common.Address, to common.Address, tokenId *big.Int) ([]byte, error) {
	return ierc721.abi.Pack("transferFrom", from, to, tokenId)
}

// Ierc721Approval represents a Approval event raised by the Ierc721 contract.
type Ierc721Approval struct {
	Owner    common.Address
	Approved common.Address
	TokenId  *big.Int
	Raw      *types.Log // Blockchain specific contextual infos
}

const Ierc721ApprovalEventName = "Approval"

// ContractEventName returns the user-defined event name.
func (Ierc721Approval) ContractEventName() string {
	return Ierc721ApprovalEventName
}

// UnpackApprovalEvent is the Go binding that unpacks the event data emitted
// by contract.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (ierc721 *Ierc721) UnpackApprovalEvent(log *types.Log) (*Ierc721Approval, error) {
	event := "Approval"
	if log.Topics[0] != ierc721.abi.Events[event].ID {
		return nil, errors.New("event signature mismatch")
	}
	out := new(Ierc721Approval)
	if len(log.Data) > 0 {
		if err := ierc721.abi.UnpackIntoInterface(out, event, log.Data); err != nil {
			return nil, err
		}
	}
	var indexed abi.Arguments
	for _, arg := range ierc721.abi.Events[event].Inputs {
		if arg.Indexed {
			indexed = append(indexed, arg)
		}
	}
	if err := abi.ParseTopics(out, indexed, log.Topics[1:]); err != nil {
		return nil, err
	}
	out.Raw = log
	return out, nil
}

// Ierc721ApprovalForAll represents a ApprovalForAll event raised by the Ierc721 contract.
type Ierc721ApprovalForAll struct {
	Owner    common.Address
	Operator common.Address
	Approved bool
	Raw      *types.Log // Blockchain specific contextual infos
}

const Ierc721ApprovalForAllEventName = "ApprovalForAll"

// ContractEventName returns the user-defined event name.
func (Ierc721ApprovalForAll) ContractEventName() string {
	return Ierc721ApprovalForAllEventName
}

// UnpackApprovalForAllEvent is the Go binding that unpacks the event data emitted
// by contract.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (ierc721 *Ierc721) UnpackApprovalForAllEvent(log *types.Log) (*Ierc721ApprovalForAll, error) {
	event := "ApprovalForAll"
	if log.Topics[0] != ierc721.abi.Events[event].ID {
		return nil, errors.New("event signature mismatch")
	}
	out := new(Ierc721ApprovalForAll)
	if len(log.Data) > 0 {
		if err := ierc721.abi.UnpackIntoInterface(out, event, log.Data); err != nil {
			return nil, err
		}
	}
	var indexed abi.Arguments
	for _, arg := range ierc721.abi.Events[event].Inputs {
		if arg.Indexed {
			indexed = append(indexed, arg)
		}
	}
	if err := abi.ParseTopics(out, indexed, log.Topics[1:]); err != nil {
		return nil, err
	}
	out.Raw = log
	return out, nil
}

// Ierc721ConsecutiveTransfer represents a ConsecutiveTransfer event raised by the Ierc721 contract.
type Ierc721ConsecutiveTransfer struct {
	FromTokenId *big.Int
	ToTokenId   *big.Int
	From        common.Address
	To          common.Address
	Raw         *types.Log // Blockchain specific contextual infos
}

const Ierc721ConsecutiveTransferEventName = "ConsecutiveTransfer"

// ContractEventName returns the user-defined event name.
func (Ierc721ConsecutiveTransfer) ContractEventName() string {
	return Ierc721ConsecutiveTransferEventName
}

// UnpackConsecutiveTransferEvent is the Go binding that unpacks the event data emitted
// by contract.
//
// Solidity: event ConsecutiveTransfer(uint256 indexed fromTokenId, uint256 toTokenId, address indexed from, address indexed to)
func (ierc721 *Ierc721) UnpackConsecutiveTransferEvent(log *types.Log) (*Ierc721ConsecutiveTransfer, error) {
	event := "ConsecutiveTransfer"
	if log.Topics[0] != ierc721.abi.Events[event].ID {
		return nil, errors.New("event signature mismatch")
	}
	out := new(Ierc721ConsecutiveTransfer)
	if len(log.Data) > 0 {
		if err := ierc721.abi.UnpackIntoInterface(out, event, log.Data); err != nil {
			return nil, err
		}
	}
	var indexed abi.Arguments
	for _, arg := range ierc721.abi.Events[event].Inputs {
		if arg.Indexed {
			indexed = append(indexed, arg)
		}
	}
	if err := abi.ParseTopics(out, indexed, log.Topics[1:]); err != nil {
		return nil, err
	}
	out.Raw = log
	return out, nil
}

// Ierc721Transfer represents a Transfer event raised by the Ierc721 contract.
type Ierc721Transfer struct {
	From    common.Address
	To      common.Address
	TokenId *big.Int
	Raw     *types.Log // Blockchain specific contextual infos
}

const Ierc721TransferEventName = "Transfer"

// ContractEventName returns the user-defined event name.
func (Ierc721Transfer) ContractEventName() string {
	return Ierc721TransferEventName
}

// UnpackTransferEvent is the Go binding that unpacks the event data emitted
// by contract.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (ierc721 *Ierc721) UnpackTransferEvent(log *types.Log) (*Ierc721Transfer, error) {
	event := "Transfer"
	if log.Topics[0] != ierc721.abi.Events[event].ID {
		return nil, errors.New("event signature mismatch")
	}
	out := new(Ierc721Transfer)
	if len(log.Data) > 0 {
		if err := ierc721.abi.UnpackIntoInterface(out, event, log.Data); err != nil {
			return nil, err
		}
	}
	var indexed abi.Arguments
	for _, arg := range ierc721.abi.Events[event].Inputs {
		if arg.Indexed {
			indexed = append(indexed, arg)
		}
	}
	if err := abi.ParseTopics(out, indexed, log.Topics[1:]); err != nil {
		return nil, err
	}
	out.Raw = log
	return out, nil
}

// UnpackError attempts to decode the provided error data using user-defined
// error definitions.
func (ierc721 *Ierc721) UnpackError(raw []byte) (any, error) {
	if bytes.Equal(raw[:4], ierc721.abi.Errors["ApprovalCallerNotOwnerNorApproved"].ID.Bytes()[:4]) {
		return ierc721.UnpackApprovalCallerNotOwnerNorApprovedError(raw[4:])
	}
	if bytes.Equal(raw[:4], ierc721.abi.Errors["ApprovalQueryForNonexistentToken"].ID.Bytes()[:4]) {
		return ierc721.UnpackApprovalQueryForNonexistentTokenError(raw[4:])
	}
	if bytes.Equal(raw[:4], ierc721.abi.Errors["BalanceQueryForZeroAddress"].ID.Bytes()[:4]) {
		return ierc721.UnpackBalanceQueryForZeroAddressError(raw[4:])
	}
	if bytes.Equal(raw[:4], ierc721.abi.Errors["ERC721OutOfBoundsIndex"].ID.Bytes()[:4]) {
		return ierc721.UnpackERC721OutOfBoundsIndexError(raw[4:])
	}
	if bytes.Equal(raw[:4], ierc721.abi.Errors["MintERC2309QuantityExceedsLimit"].ID.Bytes()[:4]) {
		return ierc721.UnpackMintERC2309QuantityExceedsLimitError(raw[4:])
	}
	if bytes.Equal(raw[:4], ierc721.abi.Errors["MintToZeroAddress"].ID.Bytes()[:4]) {
		return ierc721.UnpackMintToZeroAddressError(raw[4:])
	}
	if bytes.Equal(raw[:4], ierc721.abi.Errors["MintZeroQuantity"].ID.Bytes()[:4]) {
		return ierc721.UnpackMintZeroQuantityError(raw[4:])
	}
	if bytes.Equal(raw[:4], ierc721.abi.Errors["OwnerQueryForNonexistentToken"].ID.Bytes()[:4]) {
		return ierc721.UnpackOwnerQueryForNonexistentTokenError(raw[4:])
	}
	if bytes.Equal(raw[:4], ierc721.abi.Errors["OwnershipNotInitializedForExtraData"].ID.Bytes()[:4]) {
		return ierc721.UnpackOwnershipNotInitializedForExtraDataError(raw[4:])
	}
	if bytes.Equal(raw[:4], ierc721.abi.Errors["TransferCallerNotOwnerNorApproved"].ID.Bytes()[:4]) {
		return ierc721.UnpackTransferCallerNotOwnerNorApprovedError(raw[4:])
	}
	if bytes.Equal(raw[:4], ierc721.abi.Errors["TransferFromIncorrectOwner"].ID.Bytes()[:4]) {
		return ierc721.UnpackTransferFromIncorrectOwnerError(raw[4:])
	}
	if bytes.Equal(raw[:4], ierc721.abi.Errors["TransferToNonERC721ReceiverImplementer"].ID.Bytes()[:4]) {
		return ierc721.UnpackTransferToNonERC721ReceiverImplementerError(raw[4:])
	}
	if bytes.Equal(raw[:4], ierc721.abi.Errors["TransferToZeroAddress"].ID.Bytes()[:4]) {
		return ierc721.UnpackTransferToZeroAddressError(raw[4:])
	}
	if bytes.Equal(raw[:4], ierc721.abi.Errors["URIQueryForNonexistentToken"].ID.Bytes()[:4]) {
		return ierc721.UnpackURIQueryForNonexistentTokenError(raw[4:])
	}
	return nil, errors.New("Unknown error")
}

// Ierc721ApprovalCallerNotOwnerNorApproved represents a ApprovalCallerNotOwnerNorApproved error raised by the Ierc721 contract.
type Ierc721ApprovalCallerNotOwnerNorApproved struct {
}

// ErrorID returns the hash of canonical representation of the error's signature.
//
// Solidity: error ApprovalCallerNotOwnerNorApproved()
func Ierc721ApprovalCallerNotOwnerNorApprovedErrorID() common.Hash {
	return common.HexToHash("0xcfb3b9429a134b2b944604a735efdb2b29b197735c30602f556a6a2f1032f120")
}

// UnpackApprovalCallerNotOwnerNorApprovedError is the Go binding used to decode the provided
// error data into the corresponding Go error struct.
//
// Solidity: error ApprovalCallerNotOwnerNorApproved()
func (ierc721 *Ierc721) UnpackApprovalCallerNotOwnerNorApprovedError(raw []byte) (*Ierc721ApprovalCallerNotOwnerNorApproved, error) {
	out := new(Ierc721ApprovalCallerNotOwnerNorApproved)
	if err := ierc721.abi.UnpackIntoInterface(out, "ApprovalCallerNotOwnerNorApproved", raw); err != nil {
		return nil, err
	}
	return out, nil
}

// Ierc721ApprovalQueryForNonexistentToken represents a ApprovalQueryForNonexistentToken error raised by the Ierc721 contract.
type Ierc721ApprovalQueryForNonexistentToken struct {
}

// ErrorID returns the hash of canonical representation of the error's signature.
//
// Solidity: error ApprovalQueryForNonexistentToken()
func Ierc721ApprovalQueryForNonexistentTokenErrorID() common.Hash {
	return common.HexToHash("0xcf4700e46ed41ef04607b4e3308dff2984f54d77e296299fdaddb3cada81600f")
}

// UnpackApprovalQueryForNonexistentTokenError is the Go binding used to decode the provided
// error data into the corresponding Go error struct.
//
// Solidity: error ApprovalQueryForNonexistentToken()
func (ierc721 *Ierc721) UnpackApprovalQueryForNonexistentTokenError(raw []byte) (*Ierc721ApprovalQueryForNonexistentToken, error) {
	out := new(Ierc721ApprovalQueryForNonexistentToken)
	if err := ierc721.abi.UnpackIntoInterface(out, "ApprovalQueryForNonexistentToken", raw); err != nil {
		return nil, err
	}
	return out, nil
}

// Ierc721BalanceQueryForZeroAddress represents a BalanceQueryForZeroAddress error raised by the Ierc721 contract.
type Ierc721BalanceQueryForZeroAddress struct {
}

// ErrorID returns the hash of canonical representation of the error's signature.
//
// Solidity: error BalanceQueryForZeroAddress()
func Ierc721BalanceQueryForZeroAddressErrorID() common.Hash {
	return common.HexToHash("0x8f4eb6044d70ec5bf71516c5fb8d3c3aef5dba1bd1c93d779e9c0f269589e79c")
}

// UnpackBalanceQueryForZeroAddressError is the Go binding used to decode the provided
// error data into the corresponding Go error struct.
//
// Solidity: error BalanceQueryForZeroAddress()
func (ierc721 *Ierc721) UnpackBalanceQueryForZeroAddressError(raw []byte) (*Ierc721BalanceQueryForZeroAddress, error) {
	out := new(Ierc721BalanceQueryForZeroAddress)
	if err := ierc721.abi.UnpackIntoInterface(out, "BalanceQueryForZeroAddress", raw); err != nil {
		return nil, err
	}
	return out, nil
}

// Ierc721ERC721OutOfBoundsIndex represents a ERC721OutOfBoundsIndex error raised by the Ierc721 contract.
type Ierc721ERC721OutOfBoundsIndex struct {
	Owner common.Address
	Index *big.Int
}

// ErrorID returns the hash of canonical representation of the error's signature.
//
// Solidity: error ERC721OutOfBoundsIndex(address owner, uint256 index)
func Ierc721ERC721OutOfBoundsIndexErrorID() common.Hash {
	return common.HexToHash("0xa57d13dc78ab2b1f1191d9429a298559c44d02b5951a92c2376aa50074cc4509")
}

// UnpackERC721OutOfBoundsIndexError is the Go binding used to decode the provided
// error data into the corresponding Go error struct.
//
// Solidity: error ERC721OutOfBoundsIndex(address owner, uint256 index)
func (ierc721 *Ierc721) UnpackERC721OutOfBoundsIndexError(raw []byte) (*Ierc721ERC721OutOfBoundsIndex, error) {
	out := new(Ierc721ERC721OutOfBoundsIndex)
	if err := ierc721.abi.UnpackIntoInterface(out, "ERC721OutOfBoundsIndex", raw); err != nil {
		return nil, err
	}
	return out, nil
}

// Ierc721MintERC2309QuantityExceedsLimit represents a MintERC2309QuantityExceedsLimit error raised by the Ierc721 contract.
type Ierc721MintERC2309QuantityExceedsLimit struct {
}

// ErrorID returns the hash of canonical representation of the error's signature.
//
// Solidity: error MintERC2309QuantityExceedsLimit()
func Ierc721MintERC2309QuantityExceedsLimitErrorID() common.Hash {
	return common.HexToHash("0x3db1f9afdc4a8b6134b1f81992ec3c4e0b7e4d3131e055eb17d1a0ba02c36c37")
}

// UnpackMintERC2309QuantityExceedsLimitError is the Go binding used to decode the provided
// error data into the corresponding Go error struct.
//
// Solidity: error MintERC2309QuantityExceedsLimit()
func (ierc721 *Ierc721) UnpackMintERC2309QuantityExceedsLimitError(raw []byte) (*Ierc721MintERC2309QuantityExceedsLimit, error) {
	out := new(Ierc721MintERC2309QuantityExceedsLimit)
	if err := ierc721.abi.UnpackIntoInterface(out, "MintERC2309QuantityExceedsLimit", raw); err != nil {
		return nil, err
	}
	return out, nil
}

// Ierc721MintToZeroAddress represents a MintToZeroAddress error raised by the Ierc721 contract.
type Ierc721MintToZeroAddress struct {
}

// ErrorID returns the hash of canonical representation of the error's signature.
//
// Solidity: error MintToZeroAddress()
func Ierc721MintToZeroAddressErrorID() common.Hash {
	return common.HexToHash("0x2e076300cc9339eb5c3cef53bf1884bed209f3e8a58ca06b0a19c37ff1ae363c")
}

// UnpackMintToZeroAddressError is the Go binding used to decode the provided
// error data into the corresponding Go error struct.
//
// Solidity: error MintToZeroAddress()
func (ierc721 *Ierc721) UnpackMintToZeroAddressError(raw []byte) (*Ierc721MintToZeroAddress, error) {
	out := new(Ierc721MintToZeroAddress)
	if err := ierc721.abi.UnpackIntoInterface(out, "MintToZeroAddress", raw); err != nil {
		return nil, err
	}
	return out, nil
}

// Ierc721MintZeroQuantity represents a MintZeroQuantity error raised by the Ierc721 contract.
type Ierc721MintZeroQuantity struct {
}

// ErrorID returns the hash of canonical representation of the error's signature.
//
// Solidity: error MintZeroQuantity()
func Ierc721MintZeroQuantityErrorID() common.Hash {
	return common.HexToHash("0xb562e8dd38b8d2a6fb8156b4974f05d22935d7700877ad15fde6741bbc25fd02")
}

// UnpackMintZeroQuantityError is the Go binding used to decode the provided
// error data into the corresponding Go error struct.
//
// Solidity: error MintZeroQuantity()
func (ierc721 *Ierc721) UnpackMintZeroQuantityError(raw []byte) (*Ierc721MintZeroQuantity, error) {
	out := new(Ierc721MintZeroQuantity)
	if err := ierc721.abi.UnpackIntoInterface(out, "MintZeroQuantity", raw); err != nil {
		return nil, err
	}
	return out, nil
}

// Ierc721OwnerQueryForNonexistentToken represents a OwnerQueryForNonexistentToken error raised by the Ierc721 contract.
type Ierc721OwnerQueryForNonexistentToken struct {
}

// ErrorID returns the hash of canonical representation of the error's signature.
//
// Solidity: error OwnerQueryForNonexistentToken()
func Ierc721OwnerQueryForNonexistentTokenErrorID() common.Hash {
	return common.HexToHash("0xdf2d9b424672bd00e1e032c20dbf3b98e82895632ef5694f935500416ec6869f")
}

// UnpackOwnerQueryForNonexistentTokenError is the Go binding used to decode the provided
// error data into the corresponding Go error struct.
//
// Solidity: error OwnerQueryForNonexistentToken()
func (ierc721 *Ierc721) UnpackOwnerQueryForNonexistentTokenError(raw []byte) (*Ierc721OwnerQueryForNonexistentToken, error) {
	out := new(Ierc721OwnerQueryForNonexistentToken)
	if err := ierc721.abi.UnpackIntoInterface(out, "OwnerQueryForNonexistentToken", raw); err != nil {
		return nil, err
	}
	return out, nil
}

// Ierc721OwnershipNotInitializedForExtraData represents a OwnershipNotInitializedForExtraData error raised by the Ierc721 contract.
type Ierc721OwnershipNotInitializedForExtraData struct {
}

// ErrorID returns the hash of canonical representation of the error's signature.
//
// Solidity: error OwnershipNotInitializedForExtraData()
func Ierc721OwnershipNotInitializedForExtraDataErrorID() common.Hash {
	return common.HexToHash("0x00d581532958f43622785633cc88156b61c1db85758a0959b86c456afb2f30a4")
}

// UnpackOwnershipNotInitializedForExtraDataError is the Go binding used to decode the provided
// error data into the corresponding Go error struct.
//
// Solidity: error OwnershipNotInitializedForExtraData()
func (ierc721 *Ierc721) UnpackOwnershipNotInitializedForExtraDataError(raw []byte) (*Ierc721OwnershipNotInitializedForExtraData, error) {
	out := new(Ierc721OwnershipNotInitializedForExtraData)
	if err := ierc721.abi.UnpackIntoInterface(out, "OwnershipNotInitializedForExtraData", raw); err != nil {
		return nil, err
	}
	return out, nil
}

// Ierc721TransferCallerNotOwnerNorApproved represents a TransferCallerNotOwnerNorApproved error raised by the Ierc721 contract.
type Ierc721TransferCallerNotOwnerNorApproved struct {
}

// ErrorID returns the hash of canonical representation of the error's signature.
//
// Solidity: error TransferCallerNotOwnerNorApproved()
func Ierc721TransferCallerNotOwnerNorApprovedErrorID() common.Hash {
	return common.HexToHash("0x59c896bee5f3fe07105589e63f6894f22b4f86fc5ae33f4b35024a15fad3a384")
}

// UnpackTransferCallerNotOwnerNorApprovedError is the Go binding used to decode the provided
// error data into the corresponding Go error struct.
//
// Solidity: error TransferCallerNotOwnerNorApproved()
func (ierc721 *Ierc721) UnpackTransferCallerNotOwnerNorApprovedError(raw []byte) (*Ierc721TransferCallerNotOwnerNorApproved, error) {
	out := new(Ierc721TransferCallerNotOwnerNorApproved)
	if err := ierc721.abi.UnpackIntoInterface(out, "TransferCallerNotOwnerNorApproved", raw); err != nil {
		return nil, err
	}
	return out, nil
}

// Ierc721TransferFromIncorrectOwner represents a TransferFromIncorrectOwner error raised by the Ierc721 contract.
type Ierc721TransferFromIncorrectOwner struct {
}

// ErrorID returns the hash of canonical representation of the error's signature.
//
// Solidity: error TransferFromIncorrectOwner()
func Ierc721TransferFromIncorrectOwnerErrorID() common.Hash {
	return common.HexToHash("0xa1148100b7a051a7c260d3948c4514f272c11602e2f32608ea9ae92eca16e631")
}

// UnpackTransferFromIncorrectOwnerError is the Go binding used to decode the provided
// error data into the corresponding Go error struct.
//
// Solidity: error TransferFromIncorrectOwner()
func (ierc721 *Ierc721) UnpackTransferFromIncorrectOwnerError(raw []byte) (*Ierc721TransferFromIncorrectOwner, error) {
	out := new(Ierc721TransferFromIncorrectOwner)
	if err := ierc721.abi.UnpackIntoInterface(out, "TransferFromIncorrectOwner", raw); err != nil {
		return nil, err
	}
	return out, nil
}

// Ierc721TransferToNonERC721ReceiverImplementer represents a TransferToNonERC721ReceiverImplementer error raised by the Ierc721 contract.
type Ierc721TransferToNonERC721ReceiverImplementer struct {
}

// ErrorID returns the hash of canonical representation of the error's signature.
//
// Solidity: error TransferToNonERC721ReceiverImplementer()
func Ierc721TransferToNonERC721ReceiverImplementerErrorID() common.Hash {
	return common.HexToHash("0xd1a57ed6c24806c9f10c5c8e411074784b421171a7665fc4a05b5e0f95903d49")
}

// UnpackTransferToNonERC721ReceiverImplementerError is the Go binding used to decode the provided
// error data into the corresponding Go error struct.
//
// Solidity: error TransferToNonERC721ReceiverImplementer()
func (ierc721 *Ierc721) UnpackTransferToNonERC721ReceiverImplementerError(raw []byte) (*Ierc721TransferToNonERC721ReceiverImplementer, error) {
	out := new(Ierc721TransferToNonERC721ReceiverImplementer)
	if err := ierc721.abi.UnpackIntoInterface(out, "TransferToNonERC721ReceiverImplementer", raw); err != nil {
		return nil, err
	}
	return out, nil
}

// Ierc721TransferToZeroAddress represents a TransferToZeroAddress error raised by the Ierc721 contract.
type Ierc721TransferToZeroAddress struct {
}

// ErrorID returns the hash of canonical representation of the error's signature.
//
// Solidity: error TransferToZeroAddress()
func Ierc721TransferToZeroAddressErrorID() common.Hash {
	return common.HexToHash("0xea553b3442b8444ed8b0ccbedb10f85cdc3023a296c01cc0fd14e59a1d027a57")
}

// UnpackTransferToZeroAddressError is the Go binding used to decode the provided
// error data into the corresponding Go error struct.
//
// Solidity: error TransferToZeroAddress()
func (ierc721 *Ierc721) UnpackTransferToZeroAddressError(raw []byte) (*Ierc721TransferToZeroAddress, error) {
	out := new(Ierc721TransferToZeroAddress)
	if err := ierc721.abi.UnpackIntoInterface(out, "TransferToZeroAddress", raw); err != nil {
		return nil, err
	}
	return out, nil
}

// Ierc721URIQueryForNonexistentToken represents a URIQueryForNonexistentToken error raised by the Ierc721 contract.
type Ierc721URIQueryForNonexistentToken struct {
}

// ErrorID returns the hash of canonical representation of the error's signature.
//
// Solidity: error URIQueryForNonexistentToken()
func Ierc721URIQueryForNonexistentTokenErrorID() common.Hash {
	return common.HexToHash("0xa14c4b50a5db8b0552ad61499f6df94908ccd800fb11ebb94f1eec13684e67c0")
}

// UnpackURIQueryForNonexistentTokenError is the Go binding used to decode the provided
// error data into the corresponding Go error struct.
//
// Solidity: error URIQueryForNonexistentToken()
func (ierc721 *Ierc721) UnpackURIQueryForNonexistentTokenError(raw []byte) (*Ierc721URIQueryForNonexistentToken, error) {
	out := new(Ierc721URIQueryForNonexistentToken)
	if err := ierc721.abi.UnpackIntoInterface(out, "URIQueryForNonexistentToken", raw); err != nil {
		return nil, err
	}
	return out, nil
}
